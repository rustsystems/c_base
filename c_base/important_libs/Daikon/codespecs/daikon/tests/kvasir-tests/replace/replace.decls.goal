input-language C/C++
decl-version 2.0
var-comparability none

ppt ..Caseerror():::ENTER
  ppt-type enter
  variable n
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..Caseerror():::EXIT0
  ppt-type subexit
  variable n
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..addstr():::ENTER
  ppt-type enter
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable maxset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable outset
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..addstr():::EXIT0
  ppt-type subexit
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable maxset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable outset
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..amatch():::ENTER
  ppt-type enter
  variable j
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable offset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..amatch():::EXIT0
  ppt-type subexit
  variable j
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable offset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..change():::ENTER
  ppt-type enter
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..change():::EXIT0
  ppt-type subexit
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..dodash():::ENTER
  ppt-type enter
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable dest
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable maxset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable src
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..dodash():::EXIT0
  ppt-type subexit
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable dest
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable maxset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable src
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..esc():::ENTER
  ppt-type enter
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable s
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..esc():::EXIT0
  ppt-type subexit
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable return
    var-kind variable
    rep-type int
    dec-type char
  variable s
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..getccl():::ENTER
  ppt-type enter
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..getccl():::EXIT0
  ppt-type subexit
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char

ppt ..getpat():::ENTER
  ppt-type enter
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..getpat():::EXIT0
  ppt-type subexit
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..getsub():::ENTER
  ppt-type enter
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..getsub():::EXIT0
  ppt-type subexit
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..in_pat_set():::ENTER
  ppt-type enter
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 

ppt ..in_pat_set():::EXIT0
  ppt-type subexit
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char

ppt ..in_set_2():::ENTER
  ppt-type enter
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 

ppt ..in_set_2():::EXIT0
  ppt-type subexit
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char

ppt ..locate():::ENTER
  ppt-type enter
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable offset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..locate():::EXIT0
  ppt-type subexit
  variable c
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable offset
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char

ppt ..main():::ENTER
  ppt-type enter
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..makepat():::ENTER
  ppt-type enter
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable start
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..makepat():::EXIT0
  ppt-type subexit
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable start
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..makesub():::ENTER
  ppt-type enter
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable from
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..makesub():::EXIT0
  ppt-type subexit
  variable arg
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable delim
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
  variable from
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..my_getline():::ENTER
  ppt-type enter
  variable maxsize
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable s
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..my_getline():::EXIT0
  ppt-type subexit
  variable maxsize
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char
  variable s
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..omatch():::ENTER
  ppt-type enter
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..omatch():::EXIT0
  ppt-type subexit
  variable i
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable i[..]
    var-kind array
    enclosing-var i
    array 1
    rep-type int[]
    dec-type int[]
  variable j
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type char

ppt ..patsize():::ENTER
  ppt-type enter
  variable n
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..patsize():::EXIT0
  ppt-type subexit
  variable n
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..putsub():::ENTER
  ppt-type enter
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable s1
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable s2
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..putsub():::EXIT0
  ppt-type subexit
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable s1
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable s2
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..stclose():::ENTER
  ppt-type enter
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable lastj
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..stclose():::EXIT0
  ppt-type subexit
  variable j
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable j[..]
    var-kind array
    enclosing-var j
    array 1
    rep-type int[]
    dec-type int[]
  variable lastj
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..subline():::ENTER
  ppt-type enter
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..subline():::EXIT0
  ppt-type subexit
  variable lin
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable pat
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable sub
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

