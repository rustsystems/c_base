===========================================================================
..main():::ENTER
::abracadabra has only one value
::abracadabra.MIT_id has only one value
::abracadabra.MIT_id[] == [5, 4, 6, 3, 7, 2, 8, 1, 9]
::abracadabra.birthday has only one value
::abracadabra.birthday[] == [1983, 10, 30]
::abracadabra.social_security has only one value
::abracadabra.social_security[] == [1, 1, 2, 3, 5, 8, 13, 21, 35]
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->C contains no nulls and has only one value, of length 8
::eightA[].B[0]->C.baz_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->C.baz_tail == [50000, 55, 555, 5555, 55555, 555555, 5555555, 55555555]
::eightA[].B[0]->C.y == [4000, 44, 444, 4444, 44444, 444444, 4444444, 44444444]
::eightA[].B[0]->D contains no nulls and has only one value, of length 8
::eightA[].B[0]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[0]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->bar_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->bar_tail == [600000, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->C contains no nulls and has only one value, of length 8
::eightA[].B[1]->C.baz_head == [-6, 66, 66, 66, 66, 66, 66, 66]
::eightA[].B[1]->C.baz_tail == [-10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]
::eightA[].B[1]->C.y == [-8, 88, 888, 8888, 88888, 888888, 8888888, 88888888]
::eightA[].B[1]->D contains no nulls and has only one value, of length 8
::eightA[].B[1]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[1]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->bar_head == [-4, 44, 44, 44, 44, 44, 44, 44]
::eightA[].B[1]->bar_tail == [-12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2]->C contains no nulls and has only one value, of length 8
::eightA[].B[2]->C.baz_head == [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999]
::eightA[].B[2]->C.baz_tail == [15, 1500, 15000, 150000, 1500000, 1500000, 15000000, 150000000]
::eightA[].B[2]->C.y == [12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[2]->D contains no nulls and has only one value, of length 8
::eightA[].B[2]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[2]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[2]->bar_head == [6, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[2]->bar_tail == [18, 1800, 18000, 180000, 1800000, 1800000, 18000000, 180000000]
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 0
::globalIntPtr == null
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr == null
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [71, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 54, 55]
::population[].firstName == [hello1, hello2, hello3, hello4, hello5]
::population[].lastName == [baby1, baby2, baby3, baby4, baby5]
::population[].middleName == [world1, world2, world3, world4, world5]
::population[].weight == [6.1, 6.2, 6.3, 6.4, 6.5]
===========================================================================
..main():::EXIT
::abracadabra == orig(::abracadabra)
::abracadabra.MIT_id == orig(::abracadabra.MIT_id)
::abracadabra.MIT_id[] == orig(::abracadabra.MIT_id[])
::abracadabra.birthday == orig(::abracadabra.birthday)
::abracadabra.birthday[] == orig(::abracadabra.birthday[])
::abracadabra.social_security == orig(::abracadabra.social_security)
::abracadabra.social_security[] == orig(::abracadabra.social_security[])
::basicIntArray == orig(::basicIntArray)
::basicIntArray[] == orig(::basicIntArray[])
::eightA == orig(::eightA)
::eightA[] == orig(::eightA[])
::eightA[].B[0] == orig(::eightA[].B[0])
::eightA[].B[0]->C == orig(::eightA[].B[0]->C)
::eightA[].B[0]->C.baz_head == orig(::eightA[].B[0]->C.baz_head)
::eightA[].B[0]->C.baz_tail == orig(::eightA[].B[0]->C.baz_tail)
::eightA[].B[0]->C.y == orig(::eightA[].B[0]->C.y)
::eightA[].B[0]->D == orig(::eightA[].B[0]->D)
::eightA[].B[0]->D->neverSeeMe == orig(::eightA[].B[0]->D->neverSeeMe)
::eightA[].B[0]->D[0] == orig(::eightA[].B[0]->D[0])
::eightA[].B[0]->bar_head == orig(::eightA[].B[0]->bar_head)
::eightA[].B[0]->bar_tail == orig(::eightA[].B[0]->bar_tail)
::eightA[].B[0][0] == orig(::eightA[].B[0][0])
::eightA[].B[1] == orig(::eightA[].B[1])
::eightA[].B[1]->C == orig(::eightA[].B[1]->C)
::eightA[].B[1]->C.baz_head == orig(::eightA[].B[1]->C.baz_head)
::eightA[].B[1]->C.baz_tail == orig(::eightA[].B[1]->C.baz_tail)
::eightA[].B[1]->C.y == orig(::eightA[].B[1]->C.y)
::eightA[].B[1]->D == orig(::eightA[].B[1]->D)
::eightA[].B[1]->D->neverSeeMe == orig(::eightA[].B[1]->D->neverSeeMe)
::eightA[].B[1]->D[0] == orig(::eightA[].B[1]->D[0])
::eightA[].B[1]->bar_head == orig(::eightA[].B[1]->bar_head)
::eightA[].B[1]->bar_tail == orig(::eightA[].B[1]->bar_tail)
::eightA[].B[1][0] == orig(::eightA[].B[1][0])
::eightA[].B[2] == orig(::eightA[].B[2])
::eightA[].B[2]->C == orig(::eightA[].B[2]->C)
::eightA[].B[2]->C.baz_head == orig(::eightA[].B[2]->C.baz_head)
::eightA[].B[2]->C.baz_tail == orig(::eightA[].B[2]->C.baz_tail)
::eightA[].B[2]->C.y == orig(::eightA[].B[2]->C.y)
::eightA[].B[2]->D == orig(::eightA[].B[2]->D)
::eightA[].B[2]->D->neverSeeMe == orig(::eightA[].B[2]->D->neverSeeMe)
::eightA[].B[2]->D[0] == orig(::eightA[].B[2]->D[0])
::eightA[].B[2]->bar_head == orig(::eightA[].B[2]->bar_head)
::eightA[].B[2]->bar_tail == orig(::eightA[].B[2]->bar_tail)
::eightA[].B[2][0] == orig(::eightA[].B[2][0])
::eightA[].foo_head == orig(::eightA[].foo_head)
::eightA[].foo_tail == orig(::eightA[].foo_tail)
::multiDimensional == orig(::multiDimensional)
::multiDimensional[] == orig(::multiDimensional[])
::population == orig(::population)
::population[] == orig(::population[])
::abracadabra has only one value
::abracadabra.MIT_id has only one value
::abracadabra.MIT_id[] == [5, 4, 6, 3, 7, 2, 8, 1, 9]
::abracadabra.birthday has only one value
::abracadabra.birthday[] == [1983, 10, 30]
::abracadabra.social_security has only one value
::abracadabra.social_security[] == [1, 1, 2, 3, 5, 8, 13, 21, 35]
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->C contains no nulls and has only one value, of length 8
::eightA[].B[0]->C.baz_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->C.baz_tail == [50000, 55, 555, 5555, 55555, 555555, 5555555, 55555555]
::eightA[].B[0]->C.y == [4000, 44, 444, 4444, 44444, 444444, 4444444, 44444444]
::eightA[].B[0]->D contains no nulls and has only one value, of length 8
::eightA[].B[0]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[0]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->bar_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->bar_tail == [600000, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->C contains no nulls and has only one value, of length 8
::eightA[].B[1]->C.baz_head == [-6, 66, 66, 66, 66, 66, 66, 66]
::eightA[].B[1]->C.baz_tail == [-10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]
::eightA[].B[1]->C.y == [-8, 88, 888, 8888, 88888, 888888, 8888888, 88888888]
::eightA[].B[1]->D contains no nulls and has only one value, of length 8
::eightA[].B[1]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[1]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->bar_head == [-4, 44, 44, 44, 44, 44, 44, 44]
::eightA[].B[1]->bar_tail == [-12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2]->C contains no nulls and has only one value, of length 8
::eightA[].B[2]->C.baz_head == [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999]
::eightA[].B[2]->C.baz_tail == [15, 1500, 15000, 150000, 1500000, 1500000, 15000000, 150000000]
::eightA[].B[2]->C.y == [12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[2]->D contains no nulls and has only one value, of length 8
::eightA[].B[2]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[2]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[2]->bar_head == [6, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[2]->bar_tail == [18, 1800, 18000, 180000, 1800000, 1800000, 18000000, 180000000]
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
return == 0
===========================================================================
ArrayTest.c.returnIntSum():::ENTER
::abracadabra has only one value
::abracadabra.MIT_id has only one value
::abracadabra.MIT_id[] == [5, 4, 6, 3, 7, 2, 8, 1, 9]
::abracadabra.birthday has only one value
::abracadabra.birthday[] == [1983, 10, 30]
::abracadabra.social_security has only one value
::abracadabra.social_security[] == [1, 1, 2, 3, 5, 8, 13, 21, 35]
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->C contains no nulls and has only one value, of length 8
::eightA[].B[0]->C.baz_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->C.baz_tail == [50000, 55, 555, 5555, 55555, 555555, 5555555, 55555555]
::eightA[].B[0]->C.y == [4000, 44, 444, 4444, 44444, 444444, 4444444, 44444444]
::eightA[].B[0]->D contains no nulls and has only one value, of length 8
::eightA[].B[0]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[0]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->bar_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->bar_tail == [600000, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->C contains no nulls and has only one value, of length 8
::eightA[].B[1]->C.baz_head == [-6, 66, 66, 66, 66, 66, 66, 66]
::eightA[].B[1]->C.baz_tail == [-10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]
::eightA[].B[1]->C.y == [-8, 88, 888, 8888, 88888, 888888, 8888888, 88888888]
::eightA[].B[1]->D contains no nulls and has only one value, of length 8
::eightA[].B[1]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[1]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->bar_head == [-4, 44, 44, 44, 44, 44, 44, 44]
::eightA[].B[1]->bar_tail == [-12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2]->C contains no nulls and has only one value, of length 8
::eightA[].B[2]->C.baz_head == [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999]
::eightA[].B[2]->C.baz_tail == [15, 1500, 15000, 150000, 1500000, 1500000, 15000000, 150000000]
::eightA[].B[2]->C.y == [12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[2]->D contains no nulls and has only one value, of length 8
::eightA[].B[2]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[2]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[2]->bar_head == [6, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[2]->bar_tail == [18, 1800, 18000, 180000, 1800000, 1800000, 18000000, 180000000]
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
::static_local_array has only one value
::static_local_array[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
a == 250
b has only one value
b[] == [61, 61, 62, 63, 65, 68]
===========================================================================
ArrayTest.c.returnIntSum():::EXIT
::abracadabra == orig(::abracadabra)
::abracadabra.MIT_id == orig(::abracadabra.MIT_id)
::abracadabra.MIT_id[] == orig(::abracadabra.MIT_id[])
::abracadabra.birthday == orig(::abracadabra.birthday)
::abracadabra.birthday[] == orig(::abracadabra.birthday[])
::abracadabra.social_security == orig(::abracadabra.social_security)
::abracadabra.social_security[] == orig(::abracadabra.social_security[])
::basicIntArray == orig(::basicIntArray)
::basicIntArray[] == orig(::basicIntArray[])
::eightA == orig(::eightA)
::eightA[] == orig(::eightA[])
::eightA[].B[0] == orig(::eightA[].B[0])
::eightA[].B[0]->C == orig(::eightA[].B[0]->C)
::eightA[].B[0]->C.baz_head == orig(::eightA[].B[0]->C.baz_head)
::eightA[].B[0]->C.baz_tail == orig(::eightA[].B[0]->C.baz_tail)
::eightA[].B[0]->C.y == orig(::eightA[].B[0]->C.y)
::eightA[].B[0]->D == orig(::eightA[].B[0]->D)
::eightA[].B[0]->D->neverSeeMe == orig(::eightA[].B[0]->D->neverSeeMe)
::eightA[].B[0]->D[0] == orig(::eightA[].B[0]->D[0])
::eightA[].B[0]->bar_head == orig(::eightA[].B[0]->bar_head)
::eightA[].B[0]->bar_tail == orig(::eightA[].B[0]->bar_tail)
::eightA[].B[0][0] == orig(::eightA[].B[0][0])
::eightA[].B[1] == orig(::eightA[].B[1])
::eightA[].B[1]->C == orig(::eightA[].B[1]->C)
::eightA[].B[1]->C.baz_head == orig(::eightA[].B[1]->C.baz_head)
::eightA[].B[1]->C.baz_tail == orig(::eightA[].B[1]->C.baz_tail)
::eightA[].B[1]->C.y == orig(::eightA[].B[1]->C.y)
::eightA[].B[1]->D == orig(::eightA[].B[1]->D)
::eightA[].B[1]->D->neverSeeMe == orig(::eightA[].B[1]->D->neverSeeMe)
::eightA[].B[1]->D[0] == orig(::eightA[].B[1]->D[0])
::eightA[].B[1]->bar_head == orig(::eightA[].B[1]->bar_head)
::eightA[].B[1]->bar_tail == orig(::eightA[].B[1]->bar_tail)
::eightA[].B[1][0] == orig(::eightA[].B[1][0])
::eightA[].B[2] == orig(::eightA[].B[2])
::eightA[].B[2]->C == orig(::eightA[].B[2]->C)
::eightA[].B[2]->C.baz_head == orig(::eightA[].B[2]->C.baz_head)
::eightA[].B[2]->C.baz_tail == orig(::eightA[].B[2]->C.baz_tail)
::eightA[].B[2]->C.y == orig(::eightA[].B[2]->C.y)
::eightA[].B[2]->D == orig(::eightA[].B[2]->D)
::eightA[].B[2]->D->neverSeeMe == orig(::eightA[].B[2]->D->neverSeeMe)
::eightA[].B[2]->D[0] == orig(::eightA[].B[2]->D[0])
::eightA[].B[2]->bar_head == orig(::eightA[].B[2]->bar_head)
::eightA[].B[2]->bar_tail == orig(::eightA[].B[2]->bar_tail)
::eightA[].B[2][0] == orig(::eightA[].B[2][0])
::eightA[].foo_head == orig(::eightA[].foo_head)
::eightA[].foo_tail == orig(::eightA[].foo_tail)
::globalInt == orig(::globalInt)
::globalIntPtr == orig(::globalIntPtr)
::globalIntPtr[] == orig(::globalIntPtr[])
::multiDimensional == orig(::multiDimensional)
::multiDimensional[] == orig(::multiDimensional[])
::population == orig(::population)
::populationPtr == orig(::populationPtr)
::populationPtr[] == orig(::populationPtr[])
::populationPtr[].SS == orig(::populationPtr[].SS)
::populationPtr[].age == orig(::populationPtr[].age)
::populationPtr[].weight == orig(::populationPtr[].weight)
::population[] == orig(::population[])
::population[].SS == orig(::population[].SS)
::population[].age == orig(::population[].age)
::population[].weight == orig(::population[].weight)
::static_local_array == orig(::static_local_array)
::static_local_array[] == orig(::static_local_array[])
b[] == orig(b[])
::abracadabra has only one value
::abracadabra.MIT_id has only one value
::abracadabra.MIT_id[] == [5, 4, 6, 3, 7, 2, 8, 1, 9]
::abracadabra.birthday has only one value
::abracadabra.birthday[] == [1983, 10, 30]
::abracadabra.social_security has only one value
::abracadabra.social_security[] == [1, 1, 2, 3, 5, 8, 13, 21, 35]
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->C contains no nulls and has only one value, of length 8
::eightA[].B[0]->C.baz_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->C.baz_tail == [50000, 55, 555, 5555, 55555, 555555, 5555555, 55555555]
::eightA[].B[0]->C.y == [4000, 44, 444, 4444, 44444, 444444, 4444444, 44444444]
::eightA[].B[0]->D contains no nulls and has only one value, of length 8
::eightA[].B[0]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[0]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->bar_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->bar_tail == [600000, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->C contains no nulls and has only one value, of length 8
::eightA[].B[1]->C.baz_head == [-6, 66, 66, 66, 66, 66, 66, 66]
::eightA[].B[1]->C.baz_tail == [-10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]
::eightA[].B[1]->C.y == [-8, 88, 888, 8888, 88888, 888888, 8888888, 88888888]
::eightA[].B[1]->D contains no nulls and has only one value, of length 8
::eightA[].B[1]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[1]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->bar_head == [-4, 44, 44, 44, 44, 44, 44, 44]
::eightA[].B[1]->bar_tail == [-12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2]->C contains no nulls and has only one value, of length 8
::eightA[].B[2]->C.baz_head == [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999]
::eightA[].B[2]->C.baz_tail == [15, 1500, 15000, 150000, 1500000, 1500000, 15000000, 150000000]
::eightA[].B[2]->C.y == [12, 1200, 12000, 120000, 1200000, 1200000, 12000000, 120000000]
::eightA[].B[2]->D contains no nulls and has only one value, of length 8
::eightA[].B[2]->D->neverSeeMe == [1, 0, 0, 0, 0, 0, 0, 0]
::eightA[].B[2]->D[0] contains no nulls and has only one value, of length 8
::eightA[].B[2]->bar_head == [6, 66, 666, 6666, 66666, 666666, 6666666, 66666666]
::eightA[].B[2]->bar_tail == [18, 1800, 18000, 180000, 1800000, 1800000, 18000000, 180000000]
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
::static_local_array has only one value
::static_local_array[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
b[] == [61, 61, 62, 63, 65, 68]
return == 311
