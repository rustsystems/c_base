input-language C/C++
decl-version 2.0
var-comparability none

ppt ..fun_all_filtered():::ENTER
  ppt-type enter
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..fun_all_filtered():::EXIT0
  ppt-type subexit
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..fun_none_filtered():::ENTER
  ppt-type enter
  variable ::array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array[..]
    var-kind array
    enclosing-var ::array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar
    var-kind variable
    rep-type int
    dec-type int
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..fun_none_filtered():::EXIT0
  ppt-type subexit
  variable ::array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array[..]
    var-kind array
    enclosing-var ::array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar
    var-kind variable
    rep-type int
    dec-type int
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..fun_some_filtered():::ENTER
  ppt-type enter
  variable ::array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..fun_some_filtered():::EXIT0
  ppt-type subexit
  variable ::array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..main():::ENTER
  ppt-type enter
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::array_common
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array_common[..]
    var-kind array
    enclosing-var ::array_common
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::scalar_common
    var-kind variable
    rep-type int
    dec-type int
  variable return
    var-kind variable
    rep-type int
    dec-type int

