input-language C/C++
decl-version 2.0
var-comparability none

ppt ..main():::ENTER
  ppt-type enter
  variable ::globalIntArray
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalIntArray[..]
    var-kind array
    enclosing-var ::globalIntArray
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::globalX
    var-kind variable
    rep-type int
    dec-type int
  variable ::whatsUp
    var-kind variable
    rep-type string
    dec-type char*

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::globalIntArray
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalIntArray[..]
    var-kind array
    enclosing-var ::globalIntArray
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::globalX
    var-kind variable
    rep-type int
    dec-type int
  variable ::whatsUp
    var-kind variable
    rep-type string
    dec-type char*
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..returnIntSum():::ENTER
  ppt-type enter
  variable ::globalIntArray
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalIntArray[..]
    var-kind array
    enclosing-var ::globalIntArray
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::globalX
    var-kind variable
    rep-type int
    dec-type int
  variable ::whatsUp
    var-kind variable
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type float*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type double[]
    dec-type float[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type double**
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type hashcode[]
    dec-type double*[]
  variable b[..][0]
    var-kind field [0]
    enclosing-var b[..]
    array 1
    rep-type double[]
    dec-type double[]
  variable dummy
    var-kind variable
    rep-type hashcode
    dec-type char***
    flags is_param 
  variable dummy[..]
    var-kind array
    enclosing-var dummy
    array 1
    rep-type hashcode[]
    dec-type char**[]
  variable dummy[..][0]
    var-kind field [0]
    enclosing-var dummy[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable u
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable u[..]
    var-kind array
    enclosing-var u
    array 1
    rep-type int[]
    dec-type int[]
  variable uninit
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..returnIntSum():::EXIT0
  ppt-type subexit
  variable ::globalIntArray
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalIntArray[..]
    var-kind array
    enclosing-var ::globalIntArray
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::globalX
    var-kind variable
    rep-type int
    dec-type int
  variable ::whatsUp
    var-kind variable
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type float*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type double[]
    dec-type float[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type double**
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type hashcode[]
    dec-type double*[]
  variable b[..][0]
    var-kind field [0]
    enclosing-var b[..]
    array 1
    rep-type double[]
    dec-type double[]
  variable dummy
    var-kind variable
    rep-type hashcode
    dec-type char***
    flags is_param 
  variable dummy[..]
    var-kind array
    enclosing-var dummy
    array 1
    rep-type hashcode[]
    dec-type char**[]
  variable dummy[..][0]
    var-kind field [0]
    enclosing-var dummy[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type char****
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type char***[]
  variable return[..][0]
    var-kind field [0]
    enclosing-var return[..]
    array 1
    rep-type hashcode[]
    dec-type char**[]
  variable return[..][0][0]
    var-kind field [0]
    enclosing-var return[..][0]
    array 1
    rep-type string[]
    dec-type char*[]
  variable str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable u
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable u[..]
    var-kind array
    enclosing-var u
    array 1
    rep-type int[]
    dec-type int[]
  variable uninit
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

