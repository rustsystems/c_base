input-language C/C++
decl-version 2.0
var-comparability none

ppt ..main():::ENTER
  ppt-type enter
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt Shape.Shape():::ENTER
  ppt-type enter
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Shape

ppt Shape.Shape():::EXIT0
  ppt-type subexit
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Shape

ppt Shape.compare(Shape*,\_Shape*):::ENTER
  ppt-type enter
  variable s1
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable s1[..]
    var-kind array
    enclosing-var s1
    array 1
    rep-type hashcode[]
    dec-type Shape[]
  variable s2
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable s2[..]
    var-kind array
    enclosing-var s2
    array 1
    rep-type hashcode[]
    dec-type Shape[]

ppt Shape.compare(Shape*,\_Shape*):::EXIT0
  ppt-type subexit
  variable return
    var-kind variable
    rep-type boolean
    dec-type bool
  variable s1
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable s1[..]
    var-kind array
    enclosing-var s1
    array 1
    rep-type hashcode[]
    dec-type Shape[]
  variable s2
    var-kind variable
    rep-type hashcode
    dec-type Shape*
    flags is_param 
  variable s2[..]
    var-kind array
    enclosing-var s2
    array 1
    rep-type hashcode[]
    dec-type Shape[]

ppt Square.Square():::ENTER
  ppt-type enter
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Square*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Square

ppt Square.Square():::EXIT0
  ppt-type subexit
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Square*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Square

ppt Square.num_sides():::ENTER
  ppt-type enter
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Square*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Square

ppt Square.num_sides():::EXIT0
  ppt-type subexit
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Square*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Square

ppt Triangle.Triangle():::ENTER
  ppt-type enter
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Triangle*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Triangle

ppt Triangle.Triangle():::EXIT0
  ppt-type subexit
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Triangle*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Triangle

ppt Triangle.num_sides():::ENTER
  ppt-type enter
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Triangle*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Triangle

ppt Triangle.num_sides():::EXIT0
  ppt-type subexit
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable this
    var-kind variable
    rep-type hashcode
    dec-type Triangle*
    flags is_param 
  variable this[0]
    var-kind field [0]
    enclosing-var this
    rep-type hashcode
    dec-type Triangle

