input-language C/C++
decl-version 2.0
var-comparability none

ppt ..examine():::ENTER
  ppt-type enter
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::bar
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::bar.answer
    var-kind field answer
    enclosing-var ::bar
    rep-type int
    dec-type int
  variable ::bar.dyn_array
    var-kind field dyn_array
    enclosing-var ::bar
    rep-type hashcode
    dec-type int*
  variable ::bar.dyn_array[..]
    var-kind array
    enclosing-var ::bar.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable ::foo
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::foo.answer
    var-kind field answer
    enclosing-var ::foo
    rep-type int
    dec-type int
  variable ::foo.dyn_array
    var-kind field dyn_array
    enclosing-var ::foo
    rep-type hashcode
    dec-type int*
  variable ::foo.dyn_array[..]
    var-kind array
    enclosing-var ::foo.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable p
    var-kind variable
    rep-type hashcode
    dec-type desc*
    flags is_param 
  variable p[..]
    var-kind array
    enclosing-var p
    array 1
    rep-type hashcode[]
    dec-type desc[]
  variable p[..].answer
    var-kind field answer
    enclosing-var p[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable p[..].dyn_array
    var-kind field dyn_array
    enclosing-var p[..]
    array 1
    rep-type hashcode[]
    dec-type int*[]
  variable p[..].dyn_array[0]
    var-kind field [0]
    enclosing-var p[..].dyn_array
    array 1
    rep-type int[]
    dec-type int[]

ppt ..examine():::EXIT0
  ppt-type subexit
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::bar
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::bar.answer
    var-kind field answer
    enclosing-var ::bar
    rep-type int
    dec-type int
  variable ::bar.dyn_array
    var-kind field dyn_array
    enclosing-var ::bar
    rep-type hashcode
    dec-type int*
  variable ::bar.dyn_array[..]
    var-kind array
    enclosing-var ::bar.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable ::foo
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::foo.answer
    var-kind field answer
    enclosing-var ::foo
    rep-type int
    dec-type int
  variable ::foo.dyn_array
    var-kind field dyn_array
    enclosing-var ::foo
    rep-type hashcode
    dec-type int*
  variable ::foo.dyn_array[..]
    var-kind array
    enclosing-var ::foo.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable p
    var-kind variable
    rep-type hashcode
    dec-type desc*
    flags is_param 
  variable p[..]
    var-kind array
    enclosing-var p
    array 1
    rep-type hashcode[]
    dec-type desc[]
  variable p[..].answer
    var-kind field answer
    enclosing-var p[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable p[..].dyn_array
    var-kind field dyn_array
    enclosing-var p[..]
    array 1
    rep-type hashcode[]
    dec-type int*[]
  variable p[..].dyn_array[0]
    var-kind field [0]
    enclosing-var p[..].dyn_array
    array 1
    rep-type int[]
    dec-type int[]

ppt ..main():::ENTER
  ppt-type enter
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::bar
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::bar.answer
    var-kind field answer
    enclosing-var ::bar
    rep-type int
    dec-type int
  variable ::bar.dyn_array
    var-kind field dyn_array
    enclosing-var ::bar
    rep-type hashcode
    dec-type int*
  variable ::bar.dyn_array[..]
    var-kind array
    enclosing-var ::bar.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable ::foo
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::foo.answer
    var-kind field answer
    enclosing-var ::foo
    rep-type int
    dec-type int
  variable ::foo.dyn_array
    var-kind field dyn_array
    enclosing-var ::foo
    rep-type hashcode
    dec-type int*
  variable ::foo.dyn_array[..]
    var-kind array
    enclosing-var ::foo.dyn_array
    array 1
    rep-type int[]
    dec-type int[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::bar
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::bar.answer
    var-kind field answer
    enclosing-var ::bar
    rep-type int
    dec-type int
  variable ::bar.dyn_array
    var-kind field dyn_array
    enclosing-var ::bar
    rep-type hashcode
    dec-type int*
  variable ::bar.dyn_array[..]
    var-kind array
    enclosing-var ::bar.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable ::foo
    var-kind variable
    rep-type hashcode
    dec-type desc
  variable ::foo.answer
    var-kind field answer
    enclosing-var ::foo
    rep-type int
    dec-type int
  variable ::foo.dyn_array
    var-kind field dyn_array
    enclosing-var ::foo
    rep-type hashcode
    dec-type int*
  variable ::foo.dyn_array[..]
    var-kind array
    enclosing-var ::foo.dyn_array
    array 1
    rep-type int[]
    dec-type int[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..second_examine():::ENTER
  ppt-type enter
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::second_int
    var-kind variable
    rep-type int
    dec-type int
  variable ::second_int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::second_int_array[..]
    var-kind array
    enclosing-var ::second_int_array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable p
    var-kind variable
    rep-type hashcode
    dec-type desc*
    flags is_param 
  variable p[..]
    var-kind array
    enclosing-var p
    array 1
    rep-type hashcode[]
    dec-type desc[]
  variable p[..].answer
    var-kind field answer
    enclosing-var p[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable p[..].dyn_array
    var-kind field dyn_array
    enclosing-var p[..]
    array 1
    rep-type hashcode[]
    dec-type int*[]
  variable p[..].dyn_array[0]
    var-kind field [0]
    enclosing-var p[..].dyn_array
    array 1
    rep-type int[]
    dec-type int[]

ppt ..second_examine():::EXIT0
  ppt-type subexit
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::second_int
    var-kind variable
    rep-type int
    dec-type int
  variable ::second_int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::second_int_array[..]
    var-kind array
    enclosing-var ::second_int_array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable p
    var-kind variable
    rep-type hashcode
    dec-type desc*
    flags is_param 
  variable p[..]
    var-kind array
    enclosing-var p
    array 1
    rep-type hashcode[]
    dec-type desc[]
  variable p[..].answer
    var-kind field answer
    enclosing-var p[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable p[..].dyn_array
    var-kind field dyn_array
    enclosing-var p[..]
    array 1
    rep-type hashcode[]
    dec-type int*[]
  variable p[..].dyn_array[0]
    var-kind field [0]
    enclosing-var p[..].dyn_array
    array 1
    rep-type int[]
    dec-type int[]

ppt ..second_examine_int():::ENTER
  ppt-type enter
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::second_int
    var-kind variable
    rep-type int
    dec-type int
  variable ::second_int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::second_int_array[..]
    var-kind array
    enclosing-var ::second_int_array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable int_array[..]
    var-kind array
    enclosing-var int_array
    array 1
    rep-type int[]
    dec-type int[]
  variable numPtr
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable numPtr[..]
    var-kind array
    enclosing-var numPtr
    array 1
    rep-type int[]
    dec-type int[]

ppt ..second_examine_int():::EXIT0
  ppt-type subexit
  variable ::array1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array1[..]
    var-kind array
    enclosing-var ::array1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::array2
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::array2[..]
    var-kind array
    enclosing-var ::array2
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable ::second_int
    var-kind variable
    rep-type int
    dec-type int
  variable ::second_int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::second_int_array[..]
    var-kind array
    enclosing-var ::second_int_array
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable int_array
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable int_array[..]
    var-kind array
    enclosing-var int_array
    array 1
    rep-type int[]
    dec-type int[]
  variable numPtr
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable numPtr[..]
    var-kind array
    enclosing-var numPtr
    array 1
    rep-type int[]
    dec-type int[]
  variable return
    var-kind variable
    rep-type hashcode
    dec-type int*
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type int[]
    dec-type int[]

