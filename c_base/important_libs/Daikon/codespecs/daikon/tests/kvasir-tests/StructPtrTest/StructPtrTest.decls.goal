input-language C/C++
decl-version 2.0
var-comparability none

ppt ..barMaps():::ENTER
  ppt-type enter
  variable m
    var-kind variable
    rep-type hashcode
    dec-type map
    flags is_param 
  variable m.mapName
    var-kind field mapName
    enclosing-var m
    rep-type string
    dec-type char*
  variable m.numTiles
    var-kind field numTiles
    enclosing-var m
    rep-type int
    dec-type int
  variable m.tiles
    var-kind field tiles
    enclosing-var m
    rep-type hashcode
    dec-type tile*
  variable m.tiles[..]
    var-kind array
    enclosing-var m.tiles
    array 1
    rep-type hashcode[]
    dec-type tile[]
  variable m.tiles[..].a
    var-kind field a
    enclosing-var m.tiles[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable m.tiles[..].b
    var-kind field b
    enclosing-var m.tiles[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable m.tiles[..].c
    var-kind field c
    enclosing-var m.tiles[..]
    array 1
    rep-type int[]
    dec-type int[]

ppt ..barMaps():::EXIT0
  ppt-type subexit
  variable m
    var-kind variable
    rep-type hashcode
    dec-type map
    flags is_param 
  variable m.mapName
    var-kind field mapName
    enclosing-var m
    rep-type string
    dec-type char*
  variable m.numTiles
    var-kind field numTiles
    enclosing-var m
    rep-type int
    dec-type int
  variable m.tiles
    var-kind field tiles
    enclosing-var m
    rep-type hashcode
    dec-type tile*
  variable m.tiles[..]
    var-kind array
    enclosing-var m.tiles
    array 1
    rep-type hashcode[]
    dec-type tile[]
  variable m.tiles[..].a
    var-kind field a
    enclosing-var m.tiles[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable m.tiles[..].b
    var-kind field b
    enclosing-var m.tiles[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable m.tiles[..].c
    var-kind field c
    enclosing-var m.tiles[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..bazMapPtr():::ENTER
  ppt-type enter
  variable m
    var-kind variable
    rep-type hashcode
    dec-type map*
    flags is_param 
  variable m[..]
    var-kind array
    enclosing-var m
    array 1
    rep-type hashcode[]
    dec-type map[]
  variable m[..].mapName
    var-kind field mapName
    enclosing-var m[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable m[..].numTiles
    var-kind field numTiles
    enclosing-var m[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles
    var-kind field tiles
    enclosing-var m[..]
    array 1
    rep-type hashcode[]
    dec-type tile*[]
  variable m[..].tiles->a
    var-kind field a
    enclosing-var m[..].tiles
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles->b
    var-kind field b
    enclosing-var m[..].tiles
    array 1
    rep-type string[]
    dec-type char*[]
  variable m[..].tiles->c
    var-kind field c
    enclosing-var m[..].tiles
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles[0]
    var-kind field [0]
    enclosing-var m[..].tiles
    array 1
    rep-type hashcode[]
    dec-type tile[]

ppt ..bazMapPtr():::EXIT0
  ppt-type subexit
  variable m
    var-kind variable
    rep-type hashcode
    dec-type map*
    flags is_param 
  variable m[..]
    var-kind array
    enclosing-var m
    array 1
    rep-type hashcode[]
    dec-type map[]
  variable m[..].mapName
    var-kind field mapName
    enclosing-var m[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable m[..].numTiles
    var-kind field numTiles
    enclosing-var m[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles
    var-kind field tiles
    enclosing-var m[..]
    array 1
    rep-type hashcode[]
    dec-type tile*[]
  variable m[..].tiles->a
    var-kind field a
    enclosing-var m[..].tiles
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles->b
    var-kind field b
    enclosing-var m[..].tiles
    array 1
    rep-type string[]
    dec-type char*[]
  variable m[..].tiles->c
    var-kind field c
    enclosing-var m[..].tiles
    array 1
    rep-type int[]
    dec-type int[]
  variable m[..].tiles[0]
    var-kind field [0]
    enclosing-var m[..].tiles
    array 1
    rep-type hashcode[]
    dec-type tile[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..fooTiles():::ENTER
  ppt-type enter
  variable t
    var-kind variable
    rep-type hashcode
    dec-type tile*
    flags is_param 
  variable t[..]
    var-kind array
    enclosing-var t
    array 1
    rep-type hashcode[]
    dec-type tile[]
  variable t[..].a
    var-kind field a
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable t[..].b
    var-kind field b
    enclosing-var t[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable t[..].c
    var-kind field c
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]

ppt ..fooTiles():::EXIT0
  ppt-type subexit
  variable return
    var-kind variable
    rep-type int
    dec-type int
  variable t
    var-kind variable
    rep-type hashcode
    dec-type tile*
    flags is_param 
  variable t[..]
    var-kind array
    enclosing-var t
    array 1
    rep-type hashcode[]
    dec-type tile[]
  variable t[..].a
    var-kind field a
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]
  variable t[..].b
    var-kind field b
    enclosing-var t[..]
    array 1
    rep-type string[]
    dec-type char*[]
  variable t[..].c
    var-kind field c
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]

ppt ..main():::ENTER
  ppt-type enter

ppt ..main():::EXIT0
  ppt-type subexit
  variable return
    var-kind variable
    rep-type int
    dec-type int

