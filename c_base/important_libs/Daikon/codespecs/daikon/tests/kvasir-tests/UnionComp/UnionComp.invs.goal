===========================================================================
..alloc_comp():::ENTER
::comp_test_ptr[].comp.next == ::comp_test_ptr[].comp.next->next
::comp_test_ptr[] elements != null
::comp_test_ptr[].comp elements != null
::comp_test_ptr[].comp.next elements != null
::comp_test_ptr[].comp.next->next[0] elements != null
::comp_test_ptr[].comp.next[0] elements != null
::comp_test_ptr[].not_comp == [825373492]
::comp_test_ptr[].not_comp elements == 825373492
::comp_test_ptr[].zero == [0]
::comp_test_ptr[].zero elements == 0
::comp_test_ptr[i].zero == i
===========================================================================
..alloc_comp():::EXIT
::comp_test_ptr[].comp.next == ::comp_test_ptr[].comp.next->next
::comp_test_ptr != null
::comp_test_ptr[] elements != null
::comp_test_ptr[].comp elements != null
::comp_test_ptr[].comp.next elements != null
::comp_test_ptr[].comp.next->next[0] elements != null
::comp_test_ptr[].comp.next[0] elements != null
::comp_test_ptr[].not_comp == [825373492]
::comp_test_ptr[].zero == [0]
::comp_test_ptr[] - orig(::comp_test_ptr[]) - 80 == 0
::comp_test_ptr[].comp - orig(::comp_test_ptr[].comp) - 80 == 0
::comp_test_ptr[].comp.next - orig(::comp_test_ptr[].comp.next) - 80 == 0
::comp_test_ptr[].comp.next->next[0] - orig(::comp_test_ptr[].comp.next->next[0]) - 80 == 0
::comp_test_ptr[].comp.next[0] - orig(::comp_test_ptr[].comp.next[0]) - 80 == 0
::comp_test_ptr[].not_comp == orig(::comp_test_ptr[].not_comp) (elementwise)
::comp_test_ptr[].not_comp is the reverse of orig(::comp_test_ptr[].not_comp)
::comp_test_ptr[].zero == orig(::comp_test_ptr[].zero) (elementwise)
::comp_test_ptr[].zero is the reverse of orig(::comp_test_ptr[].zero)
===========================================================================
..main():::ENTER
::comp_test_ptr == null
===========================================================================
..main():::EXIT
::comp_test_ptr[].comp.next == ::comp_test_ptr[].comp.next->next
::comp_test_ptr has only one value
::comp_test_ptr[] contains no nulls and has only one value, of length 1
::comp_test_ptr[].comp contains no nulls and has only one value, of length 1
::comp_test_ptr[].comp.name == [ð¯Ã]
::comp_test_ptr[].comp.next contains no nulls and has only one value, of length 1
::comp_test_ptr[].comp.next->next[0] contains no nulls and has only one value, of length 1
::comp_test_ptr[].comp.next[0] contains no nulls and has only one value, of length 1
::comp_test_ptr[].not_comp == [825373492]
::comp_test_ptr[].zero == [0]
return == 0
