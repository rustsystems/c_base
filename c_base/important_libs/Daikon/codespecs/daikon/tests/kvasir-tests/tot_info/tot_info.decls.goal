input-language C/C++
decl-version 2.0
var-comparability none

ppt ..InfoTbl():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable c
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags is_param 
  variable f[..]
    var-kind array
    enclosing-var f
    array 1
    rep-type int[]
    dec-type long[]
  variable pdf
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable pdf[..]
    var-kind array
    enclosing-var pdf
    array 1
    rep-type int[]
    dec-type int[]
  variable r
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..InfoTbl():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable c
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags is_param 
  variable f[..]
    var-kind array
    enclosing-var f
    array 1
    rep-type int[]
    dec-type long[]
  variable pdf
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable pdf[..]
    var-kind array
    enclosing-var pdf
    array 1
    rep-type int[]
    dec-type int[]
  variable r
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable return
    var-kind variable
    rep-type double
    dec-type double

ppt ..LGamma():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::cof
    var-kind variable
    rep-type hashcode
    dec-type double*
    flags non_null 
  variable ::cof[..]
    var-kind array
    enclosing-var ::cof
    reference-type offset
    array 1
    rep-type double[]
    dec-type double[]
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt ..LGamma():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::cof
    var-kind variable
    rep-type hashcode
    dec-type double*
    flags non_null 
  variable ::cof[..]
    var-kind array
    enclosing-var ::cof
    reference-type offset
    array 1
    rep-type double[]
    dec-type double[]
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable return
    var-kind variable
    rep-type double
    dec-type double
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt ..QChiSq():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable chisq
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable df
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..QChiSq():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable chisq
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable df
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable return
    var-kind variable
    rep-type double
    dec-type double

ppt ..QGamma():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt ..QGamma():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable return
    var-kind variable
    rep-type double
    dec-type double
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt ..main():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt tot_info.c.gcf():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt tot_info.c.gcf():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable return
    var-kind variable
    rep-type double
    dec-type double
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt tot_info.c.gser():::ENTER
  ppt-type enter
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

ppt tot_info.c.gser():::EXIT0
  ppt-type subexit
  variable ::c
    var-kind variable
    rep-type int
    dec-type int
  variable ::f
    var-kind variable
    rep-type hashcode
    dec-type long*
    flags non_null 
  variable ::f[..]
    var-kind array
    enclosing-var ::f
    reference-type offset
    array 1
    rep-type int[]
    dec-type long[]
  variable ::line
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::r
    var-kind variable
    rep-type int
    dec-type int
  variable a
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 
  variable return
    var-kind variable
    rep-type double
    dec-type double
  variable x
    var-kind variable
    rep-type double
    dec-type double
    flags is_param 

