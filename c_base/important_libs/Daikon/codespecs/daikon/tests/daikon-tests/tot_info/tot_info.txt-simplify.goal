===========================================================================
std.InfoTbl(int;int;const long *;int *;)double:::ENTER
(EQ |r| |::r|)
(EQ |c| |::c|)
(EQ (hash |f|) (hash |::f|))
(NEQ (hash |f|) null)
(NEQ (hash |pdf|) null)
(>= |*pdf| 0)
(NEQ (hash |::line|) null)
(>= (arrayLength |::f|) 1)
(NOT (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1))) (NEQ (select (select elems |::f|) |i|) |*f|))))
(IMPLIES (EQ (- (arrayLength |::f|) 1) 0) (EQ |*pdf| 0))
(<= |*pdf| (- (arrayLength |::f|) 1))
===========================================================================
std.InfoTbl(int;int;const long *;int *;)double:::EXIT
(EQ |r| |::r|)
(EQ |r| |__orig__r|)
(EQ |r| |__orig__::r|)
(EQ |c| |::c|)
(EQ |c| |__orig__c|)
(EQ |c| |__orig__::c|)
(EQ (hash |f|) (hash |::f|))
(EQ (hash |f|) (hash |__orig__f|))
(EQ (hash |f|) (hash |__orig__::f|))
(EQ |*f| |__orig__*f|)
(EQ (hash |pdf|) (hash |__orig__pdf|))
(EQ (hash |::line|) (hash |__orig__::line|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(NEQ (hash |f|) null)
(NEQ (hash |pdf|) null)
(>= |*pdf| 0)
(NEQ (hash |::line|) null)
(>= (arrayLength |::f|) 1)
(NOT (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1))) (NEQ (select (select elems |::f|) |i|) |*f|))))
(IMPLIES (EQ |*pdf| 0) (EQ |__orig__*pdf| 0))
(IMPLIES (EQ (- (arrayLength |::f|) 1) 0) (EQ |*pdf| 0))
(<= |*pdf| (- (arrayLength |::f|) 1))
(EQ (select elems |::line|) (select elems |__orig__::line|))
(IMPLIES (EQ (- (arrayLength |::f|) 1) 0) (EQ |__orig__*pdf| 0))
(<= |__orig__*pdf| (- (arrayLength |::f|) 1))
===========================================================================
std.LGamma(double;)double:::ENTER
(>= |x| 0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
===========================================================================
std.LGamma(double;)double:::EXIT6
(EQ |::r| |::c|)
(EQ |::r| |__orig__::c|)
(EQ |x| -0.5d0)
(OR (EQ |::r| 2) (EQ |::r| 4))
(EQ |return| 0.572365d0)
(EQ |__orig__x| 0.5d0)
===========================================================================
std.LGamma(double;)double:::EXIT7
(>= |__orig__x| 1.0d0)
(EQ 0 (+ (+ |x| (* -1 |__orig__x|)) -5))
===========================================================================
std.LGamma(double;)double:::EXIT
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(EQ |::r| |__orig__::r|)
(EQ |::c| |__orig__::c|)
(IMPLIES (>= |__orig__x| 1.0d0) (>= |return| -0.120782d0))
(IMPLIES (>= |__orig__x| 1.0d0) (EQ 0 (+ (+ |x| (* -1 |__orig__x|)) -5)))
(IFF (EQ |x| -0.5d0) (EQ |__orig__x| 0.5d0))
(IFF (EQ |x| -0.5d0) (< |x| |__orig__x|))
(IMPLIES (EQ |x| -0.5d0) (OR (EQ |::c| 2) (EQ |::c| 4)))
(IMPLIES (EQ |x| -0.5d0) (EQ |::r| |::c|))
(IMPLIES (EQ |x| -0.5d0) (OR (EQ |::r| 2) (EQ |::r| 4)))
(IMPLIES (EQ |x| -0.5d0) (EQ |return| 0.572365d0))
(IMPLIES (EQ |x| -0.5d0) (> |return| |__orig__x|))
(IMPLIES (EQ |x| -0.5d0) (< |x| |return|))
(NEQ |x| 0)
(>= |x| -0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
(NEQ |return| 0)
(>= |return| -0.120782d0)
(NEQ |x| |return|)
(NEQ |x| |__orig__x|)
(EQ (select elems |::line|) (select elems |__orig__::line|))
(NEQ |return| |__orig__x|)
===========================================================================
std.QChiSq(double;int;)double:::ENTER
(>= |chisq| 0.0d0)
(>= |df| 1)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
===========================================================================
std.QChiSq(double;int;)double:::EXIT
(EQ |chisq| |__orig__chisq|)
(EQ |df| |__orig__df|)
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(EQ |::r| |__orig__::r|)
(EQ |::c| |__orig__::c|)
(>= |chisq| 0.0d0)
(>= |df| 1)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
(NEQ |chisq| |return|)
(EQ (select elems |::line|) (select elems |__orig__::line|))
===========================================================================
std.QGamma(double;double;)double:::ENTER
(>= |a| 0.5d0)
(>= |x| 0.0d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
(NEQ |a| |x|)
===========================================================================
std.QGamma(double;double;)double:::EXIT
(EQ |a| |__orig__a|)
(EQ |x| |__orig__x|)
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(EQ |::r| |__orig__::r|)
(EQ |::c| |__orig__::c|)
(>= |a| 0.5d0)
(>= |x| 0.0d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
(NEQ |a| |x|)
(NEQ |x| |return|)
(EQ (select elems |::line|) (select elems |__orig__::line|))
===========================================================================
std.gcf(double;double;)double:::ENTER
(>= |a| 0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(>= |::c| 2)
===========================================================================
std.gcf(double;double;)double:::EXIT11
===========================================================================
std.gcf(double;double;)double:::EXIT
(EQ |a| |__orig__a|)
(EQ |x| |__orig__x|)
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(EQ |::r| |__orig__::r|)
(EQ |::c| |__orig__::c|)
(>= |a| 0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(>= |::c| 2)
(EQ (select elems |::line|) (select elems |__orig__::line|))
===========================================================================
std.gser(double;double;)double:::ENTER
(>= |a| 0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
===========================================================================
std.gser(double;double;)double:::EXIT8
(EQ |x| 0.0d0)
(OR (EQ |::r| 2) (EQ |::r| 4) (EQ |::r| 6))
(>= |::c| 2)
(EQ |return| 0.0d0)
(EQ (|java->>| |::r| |::c|) 0)
===========================================================================
std.gser(double;double;)double:::EXIT9
===========================================================================
std.gser(double;double;)double:::EXIT
(EQ |a| |__orig__a|)
(EQ |x| |__orig__x|)
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |__orig__::f|) 1)) (EQ |i| |j|)) (EQ (select (select elems |::f|) |i|) (select (select elems |__orig__::f|) |j|))))
(EQ |::r| |__orig__::r|)
(EQ |::c| |__orig__::c|)
(>= |a| 0.5d0)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 2)
(NEQ |::c| 0)
(EQ (select elems |::line|) (select elems |__orig__::line|))
===========================================================================
std.main(int;char **;)int:::ENTER
(EQ |::r| |::c|)
(EQ |argc| 1)
(NEQ (hash |argv|) null)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(EQ |::r| 0)
===========================================================================
std.main(int;char **;)int:::EXIT1
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1))) (>= (select (select elems |::f|) |i|) 0)))
(EQ |return| 1)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |::f|) 1))) (>= (select (select elems |::f|) |i|) |__orig__::r|)))
(>= |::r| |::c|)
(> |::r| |__orig__::r|)
(>= |::c| |__orig__::r|)
===========================================================================
std.main(int;char **;)int:::EXIT2
(EQ |return| 1)
(> |::r| |__orig__::r|)
(> |::c| |__orig__::r|)
===========================================================================
std.main(int;char **;)int:::EXIT3
(EQ |return| 1)
(> |::r| |__orig__::r|)
(> |::c| |__orig__::r|)
===========================================================================
std.main(int;char **;)int:::EXIT4
(OR (EQ (select elems |::line|) |_string_\n|) (EQ (select elems |::line|) |_string_ \n|) (EQ (select elems |::line|) |_string_  \n|))
(>= |::c| 0)
(EQ |return| 1)
(>= |::c| |__orig__::r|)
===========================================================================
std.main(int;char **;)int:::EXIT5
(OR (EQ (select elems |::line|) |_string_\n|) (EQ (select elems |::line|) |_string_ \n|) (EQ (select elems |::line|) |_string_  \n|))
(>= |::r| 2)
(NEQ |::c| 0)
(EQ |return| 0)
(> |::r| |__orig__::r|)
(NEQ |::c| |__orig__::r|)
===========================================================================
std.main(int;char **;)int:::EXIT
(EQ |argc| |__orig__argc|)
(EQ (hash |argv|) (hash |__orig__argv|))
(EQ (hash |::line|) (hash |__orig__::line|))
(EQ (hash |::f|) (hash |__orig__::f|))
(EQ |argc| 1)
(NEQ (hash |argv|) null)
(NEQ (hash |::line|) null)
(NEQ (hash |::f|) null)
(>= |::r| 0)
(OR (EQ |return| 0) (EQ |return| 1))
(>= (arrayLength |::f|) 1)
(>= |::r| |__orig__::r|)
