===========================================================================
misc.Precedence:::OBJECT
this != null
this.i.OneOf(0, 2, 10)
===========================================================================
misc.Precedence.Precedence():::EXIT
this.i == 0
===========================================================================
misc.Precedence.lets_calculate(int):::ENTER
this.i == 10
j == 4
===========================================================================
misc.Precedence.lets_calculate(int):::EXIT
this.i == 2
Contract.Result<int>() == 6
===========================================================================
misc.Precedence.main(java.lang.String[]):::ENTER
args != null
args.GetType() == typeof(java.lang.String[])
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
===========================================================================
misc.Precedence.main(java.lang.String[]):::EXIT
Contract.ForAll(0, args.Count(), i => args[i].Equals(Contract.OldValue(args)[i]))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
