===========================================================================
misc.Precedence:::OBJECT
    Variables: this this.i
this != null
this.i == 0 || this.i == 2 || this.i == 10
===========================================================================
misc.Precedence.Precedence():::EXIT
    Variables: this this.i
this.i == 0
===========================================================================
misc.Precedence.lets_calculate(int):::ENTER
    Variables: this this.i j
this.i == 10
j == 4
===========================================================================
misc.Precedence.lets_calculate(int):::EXIT
    Variables: this this.i j return orig(this) orig(this.i) orig(j)
      Modified variables: this.i
      Unmodified variables: this j
modifies this.i
this.i == 2
\result == 6
===========================================================================
misc.Precedence.main(java.lang.String[]):::ENTER
    Variables: args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
\typeof(args) == \type(java.lang.String[])
(args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null)))
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
===========================================================================
misc.Precedence.main(java.lang.String[]):::EXIT
    Variables: args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
      Unmodified variables: args args.getClass().getName() args[] args[].toString size(args[])
(args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null)))
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
