===========================================================================
std.add_process(int;)void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
prio one of { 1, 2, 3 }
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
===========================================================================
std.add_process(int;)void:::EXIT
prio == orig(prio)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc == orig(::cur_proc.next.prev)
::cur_proc == orig(::cur_proc.prev.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc)
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.prev == orig(::cur_proc.prev.next)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.prev.next == orig(::cur_proc)
::cur_proc.prev.next == orig(::cur_proc.next.prev)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.prev.prev == orig(::cur_proc.prev.prev)
::cur_proc.prev.val == orig(::cur_proc.prev.val)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
prio one of { 1, 2, 3 }
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
orig(::alloc_proc_num) == ::alloc_proc_num - 1
::alloc_proc_num > orig(::num_processes)
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes > ::block_queue.mem_count
orig(::num_processes) == ::num_processes - 1
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.next.val <= orig(::alloc_proc_num)
::cur_proc.next.val != orig(::cur_proc.prev.val)
::cur_proc.next.val != orig(::cur_proc.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
::cur_proc.prev.val < orig(::alloc_proc_num)
::cur_proc.prev.val != orig(::cur_proc.next.val)
::cur_proc.prev.val != orig(::cur_proc.val)
::cur_proc.val <= orig(::alloc_proc_num)
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::cur_proc.prev.val)
::block_queue.first.val < orig(::alloc_proc_num)
::block_queue.first.val < orig(::cur_proc.next.val)
::block_queue.last.val < orig(::alloc_proc_num)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count <= orig(::cur_proc.next.val)
::block_queue.mem_count != orig(::cur_proc.prev.val)
===========================================================================
std.append_ele(List *;Ele *;)List *:::ENTER
a_list.first.prev == a_list.last.next
a_list.first.prev == ::block_queue.first.prev
a_list.first.prev == ::block_queue.last.next
a_list.last.next == ::block_queue.first.prev
a_list.last.next == ::block_queue.last.next
a_ele.next == a_ele.prev.next
a_ele.next.prev == a_ele.prev
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
a_list.first.prev == null
a_list.first.val >= 0
a_list.last.next == null
a_list.last.val >= 0
a_list.mem_count >= 0
a_ele != null
a_ele.next.val >= 0
a_ele.prev.val >= 0
a_ele.val >= 0
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.val >= 0
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
a_list.first.val != a_ele.prev.val
a_list.first.val != a_ele.val
a_list.first.val < ::alloc_proc_num
a_list.last.val != a_ele.prev.val
a_list.last.val != a_ele.val
a_list.last.val < ::alloc_proc_num
a_list.last.val != ::cur_proc.prev.val
a_list.mem_count < ::alloc_proc_num
a_list.mem_count < ::num_processes
a_ele.next.val != a_ele.prev.val
a_ele.next.val != a_ele.val
a_ele.next.val < ::alloc_proc_num
a_ele.prev.val != a_ele.val
a_ele.prev.val < ::alloc_proc_num
a_ele.prev.val != ::cur_proc.next.val
a_ele.val < ::alloc_proc_num
a_ele.val != ::cur_proc.next.val
a_ele.val != ::cur_proc.prev.val
a_ele.val != ::block_queue.first.val
a_ele.val != ::block_queue.last.val
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::num_processes > ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.prev.val != ::cur_proc.val
===========================================================================
std.append_ele(List *;Ele *;)List *:::EXIT
a_list == return
a_list.first == return.first
a_list.first.next == return.first.next
a_list.first.prev == a_list.last.next
a_list.first.prev == a_ele.next
a_list.first.prev == ::block_queue.first.prev
a_list.first.prev == ::block_queue.last.next
a_list.first.prev == return.first.prev
a_list.first.prev == return.last.next
a_list.first.prev == orig(a_list.first.prev)
a_list.first.prev == orig(a_list.last.next)
a_list.first.prev == orig(::block_queue.first.prev)
a_list.first.prev == orig(::block_queue.last.next)
a_list.first.val == return.first.val
a_list.first.val == orig(a_list.first.val)
a_list.last == a_ele
a_list.last == a_ele.prev.next
a_list.last == return.last
a_list.last.next == a_ele.next
a_list.last.next == ::block_queue.first.prev
a_list.last.next == ::block_queue.last.next
a_list.last.next == return.first.prev
a_list.last.next == return.last.next
a_list.last.next == orig(a_list.first.prev)
a_list.last.next == orig(a_list.last.next)
a_list.last.next == orig(::block_queue.first.prev)
a_list.last.next == orig(::block_queue.last.next)
a_list.last.prev == a_ele.prev
a_list.last.prev == return.last.prev
a_list.last.prev == orig(a_list.last)
a_list.last.val == a_ele.val
a_list.last.val == return.last.val
a_list.mem_count == return.mem_count
a_ele == a_ele.prev.next
a_ele == return.last
a_ele == orig(a_ele)
a_ele.next == ::block_queue.first.prev
a_ele.next == ::block_queue.last.next
a_ele.next == return.first.prev
a_ele.next == return.last.next
a_ele.next == orig(a_list.first.prev)
a_ele.next == orig(a_list.last.next)
a_ele.next == orig(::block_queue.first.prev)
a_ele.next == orig(::block_queue.last.next)
a_ele.prev == return.last.prev
a_ele.prev == orig(a_list.last)
a_ele.prev.next == return.last
a_ele.prev.prev == orig(a_list.last.prev)
a_ele.prev.val == orig(a_list.last.val)
a_ele.val == return.last.val
a_ele.val == orig(a_ele.val)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.prev == orig(::cur_proc.prev.next)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == return.first.prev
::block_queue.first.prev == return.last.next
::block_queue.first.prev == orig(a_list.first.prev)
::block_queue.first.prev == orig(a_list.last.next)
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.prev == orig(::block_queue.last.next)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last.next == return.first.prev
::block_queue.last.next == return.last.next
::block_queue.last.next == orig(a_list.first.prev)
::block_queue.last.next == orig(a_list.last.next)
::block_queue.last.next == orig(::block_queue.first.prev)
::block_queue.last.next == orig(::block_queue.last.next)
return.first.prev == return.last.next
return.first.prev == orig(a_list.first.prev)
return.first.prev == orig(a_list.last.next)
return.first.prev == orig(::block_queue.first.prev)
return.first.prev == orig(::block_queue.last.next)
return.first.val == orig(a_list.first.val)
return.last.next == orig(a_list.first.prev)
return.last.next == orig(a_list.last.next)
return.last.next == orig(::block_queue.first.prev)
return.last.next == orig(::block_queue.last.next)
return.last.prev == orig(a_list.last)
a_list != null
a_list.first != null
a_list.first.prev == null
a_list.first.val >= 0
a_list.last != null
a_list.last.next == null
a_list.last.val >= 0
a_list.mem_count >= 1
a_ele != null
a_ele.next == null
a_ele.prev.next != null
a_ele.prev.val >= 0
a_ele.val >= 0
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.prev != null
::cur_proc.next.val >= 1
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return.first != null
return.first.prev == null
return.first.val >= 0
return.last != null
return.last.next == null
return.last.val >= 0
return.mem_count >= 1
a_list.first.val < ::alloc_proc_num
a_list.first.val != ::cur_proc.next.val
a_list.first.val != orig(a_ele.prev.val)
a_list.last.val != a_ele.prev.val
a_list.last.val < ::alloc_proc_num
a_list.last.val != ::cur_proc.prev.val
a_list.last.val != orig(a_list.first.val)
a_list.last.val != orig(a_list.last.val)
a_list.last.val != orig(a_ele.next.val)
a_list.last.val != orig(a_ele.prev.val)
a_list.last.val != orig(::cur_proc.next.val)
a_list.last.val != orig(::cur_proc.prev.val)
a_list.last.val != orig(::block_queue.first.val)
a_list.last.val != orig(::block_queue.last.val)
orig(a_list.mem_count) == a_list.mem_count - 1
a_ele.prev.val != a_ele.val
a_ele.prev.val < ::alloc_proc_num
a_ele.prev.val != ::block_queue.last.val
a_ele.prev.val != return.last.val
a_ele.prev.val != orig(a_ele.prev.val)
a_ele.prev.val != orig(::cur_proc.prev.val)
a_ele.val < ::alloc_proc_num
a_ele.val != ::cur_proc.prev.val
a_ele.val != orig(a_list.first.val)
a_ele.val != orig(a_list.last.val)
a_ele.val != orig(a_ele.next.val)
a_ele.val != orig(a_ele.prev.val)
a_ele.val != orig(::cur_proc.next.val)
a_ele.val != orig(::cur_proc.prev.val)
a_ele.val != orig(::block_queue.first.val)
a_ele.val != orig(::block_queue.last.val)
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::alloc_proc_num > return.first.val
::alloc_proc_num > return.last.val
::alloc_proc_num >= return.mem_count
::alloc_proc_num > orig(a_list.first.val)
::alloc_proc_num > orig(a_list.last.val)
::alloc_proc_num > orig(a_list.mem_count)
::alloc_proc_num > orig(a_ele.next.val)
::alloc_proc_num > orig(a_ele.prev.val)
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::block_queue.first.val)
::alloc_proc_num > orig(::block_queue.last.val)
::alloc_proc_num > orig(::block_queue.mem_count)
::num_processes >= ::block_queue.mem_count
::num_processes >= return.mem_count
::num_processes > orig(a_list.mem_count)
::num_processes > orig(::block_queue.mem_count)
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val != return.first.val
::cur_proc.next.val != orig(a_list.first.val)
::cur_proc.next.val != orig(a_ele.prev.val)
::cur_proc.next.val % orig(::cur_proc.next.val) == 0
::cur_proc.next.val != orig(::cur_proc.prev.val)
::cur_proc.next.val != orig(::block_queue.first.val)
::cur_proc.next.val != orig(::block_queue.last.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != return.last.val
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::cur_proc.prev.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(a_list.first.val)
::block_queue.last.val != orig(a_list.last.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.mem_count >= orig(::block_queue.mem_count)
return.first.val != orig(a_ele.prev.val)
return.last.val != orig(a_list.first.val)
return.last.val != orig(a_list.last.val)
return.last.val != orig(a_ele.next.val)
return.last.val != orig(a_ele.prev.val)
return.last.val != orig(::cur_proc.next.val)
return.last.val != orig(::cur_proc.prev.val)
return.last.val != orig(::block_queue.first.val)
return.last.val != orig(::block_queue.last.val)
orig(a_list.mem_count) == return.mem_count - 1
===========================================================================
std.block_process()void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.next == ::block_queue.first.next
::cur_proc.next.next == ::block_queue.first.prev
::cur_proc.next.next == ::block_queue.first.val
::cur_proc.next.next == ::block_queue.last.next
::cur_proc.next.next == ::block_queue.last.prev
::cur_proc.next.next == ::block_queue.last.val
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val > ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::block_queue.first.val % ::cur_proc.next.val == 0
::block_queue.first.val is a bitwise subset of ::cur_proc.next.val
::block_queue.last.val % ::cur_proc.next.val == 0
::block_queue.last.val is a bitwise subset of ::cur_proc.next.val
::cur_proc.next.val > ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.block_process()void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.prev.next
::cur_proc.next == ::block_queue.first.prev
::cur_proc.next == ::block_queue.last.next
::cur_proc.next == orig(::block_queue.first.prev)
::cur_proc.next == orig(::block_queue.last.next)
::cur_proc.prev == ::block_queue.last.prev
::cur_proc.prev == orig(::block_queue.last)
::cur_proc.prev.next == ::block_queue.last
::cur_proc.prev.prev == orig(::cur_proc.next.next)
::cur_proc.prev.prev == orig(::block_queue.last.prev)
::cur_proc.prev.val == orig(::cur_proc.next.next)
::cur_proc.prev.val == orig(::block_queue.last.val)
::cur_proc.val == ::block_queue.last.val
::prio_queue == orig(::prio_queue)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.prev == orig(::block_queue.last.next)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last.next == orig(::block_queue.first.prev)
::block_queue.last.next == orig(::block_queue.last.next)
::num_processes >= 0
::cur_proc.next == null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::alloc_proc_num > orig(::block_queue.first.val)
::alloc_proc_num > orig(::block_queue.last.val)
::alloc_proc_num >= orig(::block_queue.mem_count)
::num_processes >= ::block_queue.mem_count
::num_processes >= orig(::block_queue.mem_count)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val % orig(::cur_proc.next.val) == 0
::cur_proc.prev.val is a bitwise subset of orig(::cur_proc.next.val)
::cur_proc.prev.val != orig(::cur_proc.prev.val)
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::block_queue.first.val)
::cur_proc.val != orig(::block_queue.last.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.mem_count < orig(::cur_proc.next.val)
::block_queue.mem_count >= orig(::block_queue.mem_count)
orig(::block_queue.first.val) % orig(::cur_proc.next.val) == 0
orig(::block_queue.first.val) is a bitwise subset of orig(::cur_proc.next.val)
orig(::block_queue.last.val) % orig(::cur_proc.next.val) == 0
orig(::block_queue.last.val) is a bitwise subset of orig(::cur_proc.next.val)
===========================================================================
std.del_ele(List *;Ele *;)List *:::ENTER
d_list.first.prev == d_list.last.next
d_list.first.prev == ::block_queue.first.prev
d_list.first.prev == ::block_queue.last.next
d_list.last.next == ::block_queue.first.prev
d_list.last.next == ::block_queue.last.next
d_ele == d_ele.next.prev
d_ele == d_ele.prev.next
d_ele.next.prev == d_ele.prev.next
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
d_list != null
d_list.first != null
d_list.first.prev == null
d_list.first.val >= 0
d_list.last != null
d_list.last.next == null
d_list.last.val >= 0
d_list.mem_count >= 1
d_ele != null
d_ele.next.prev != null
d_ele.next.val >= 0
d_ele.prev.next != null
d_ele.prev.val >= 0
d_ele.val >= 0
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.prev != null
::cur_proc.next.val >= 0
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
d_list.first.val != d_ele.next.val
d_list.first.val < ::alloc_proc_num
d_list.first.val != ::cur_proc.next.val
d_list.last.val != d_ele.prev.val
d_list.last.val < ::alloc_proc_num
d_list.last.val != ::cur_proc.prev.val
d_list.mem_count <= ::alloc_proc_num
d_list.mem_count <= ::num_processes
d_ele.next.val != d_ele.prev.val
d_ele.next.val != d_ele.val
d_ele.next.val < ::alloc_proc_num
d_ele.next.val != ::block_queue.first.val
d_ele.prev.val != d_ele.val
d_ele.prev.val < ::alloc_proc_num
d_ele.prev.val != ::cur_proc.next.val
d_ele.prev.val != ::block_queue.last.val
d_ele.val < ::alloc_proc_num
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.del_ele(List *;Ele *;)List *:::EXIT7
===========================================================================
std.del_ele(List *;Ele *;)List *:::EXIT
d_list == return
d_list == orig(d_list)
d_list.first == return.first
d_list.first.next == return.first.next
d_list.first.prev == d_list.last.next
d_list.first.prev == ::block_queue.first.prev
d_list.first.prev == ::block_queue.last.next
d_list.first.prev == return.first.prev
d_list.first.prev == return.last.next
d_list.first.prev == orig(d_list.first.prev)
d_list.first.prev == orig(d_list.last.next)
d_list.first.prev == orig(::block_queue.first.prev)
d_list.first.prev == orig(::block_queue.last.next)
d_list.first.val == return.first.val
d_list.last == return.last
d_list.last.next == ::block_queue.first.prev
d_list.last.next == ::block_queue.last.next
d_list.last.next == return.first.prev
d_list.last.next == return.last.next
d_list.last.next == orig(d_list.first.prev)
d_list.last.next == orig(d_list.last.next)
d_list.last.next == orig(::block_queue.first.prev)
d_list.last.next == orig(::block_queue.last.next)
d_list.last.prev == return.last.prev
d_list.last.val == return.last.val
d_list.mem_count == return.mem_count
d_ele == orig(d_ele)
d_ele == orig(d_ele.next.prev)
d_ele == orig(d_ele.prev.next)
d_ele.next == d_ele.prev.next
d_ele.next == orig(d_ele.next)
d_ele.next.next == orig(d_ele.next.next)
d_ele.next.prev == d_ele.prev
d_ele.next.val == orig(d_ele.next.val)
d_ele.prev == orig(d_ele.prev)
d_ele.prev.prev == orig(d_ele.prev.prev)
d_ele.prev.val == orig(d_ele.prev.val)
d_ele.val == orig(d_ele.val)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == orig(::cur_proc)
::cur_proc == orig(::cur_proc.next.prev)
::cur_proc == orig(::cur_proc.prev.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc.prev.next)
::cur_proc.prev.next == orig(::cur_proc.next.prev)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == return.first.prev
::block_queue.first.prev == return.last.next
::block_queue.first.prev == orig(d_list.first.prev)
::block_queue.first.prev == orig(d_list.last.next)
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.prev == orig(::block_queue.last.next)
::block_queue.last.next == return.first.prev
::block_queue.last.next == return.last.next
::block_queue.last.next == orig(d_list.first.prev)
::block_queue.last.next == orig(d_list.last.next)
::block_queue.last.next == orig(::block_queue.first.prev)
::block_queue.last.next == orig(::block_queue.last.next)
return.first.prev == return.last.next
return.first.prev == orig(d_list.first.prev)
return.first.prev == orig(d_list.last.next)
return.first.prev == orig(::block_queue.first.prev)
return.first.prev == orig(::block_queue.last.next)
return.last.next == orig(d_list.first.prev)
return.last.next == orig(d_list.last.next)
return.last.next == orig(::block_queue.first.prev)
return.last.next == orig(::block_queue.last.next)
d_list != null
d_list.first.prev == null
d_list.first.val >= 0
d_list.last.next == null
d_list.last.val >= 0
d_list.mem_count >= 0
d_ele != null
d_ele.next.val >= 0
d_ele.prev.val >= 0
d_ele.val >= 0
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.val >= 0
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return.first.prev == null
return.first.val >= 0
return.last.next == null
return.last.val >= 0
return.mem_count >= 0
d_list.first.val != d_ele.val
d_list.first.val < ::alloc_proc_num
d_list.last.val != d_ele.val
d_list.last.val < ::alloc_proc_num
d_list.mem_count < ::alloc_proc_num
d_list.mem_count < ::num_processes
orig(d_list.mem_count) == d_list.mem_count + 1
d_ele.next.val != d_ele.prev.val
d_ele.next.val != d_ele.val
d_ele.next.val < ::alloc_proc_num
d_ele.next.val != orig(d_list.first.val)
d_ele.next.val != orig(::block_queue.first.val)
d_ele.prev.val != d_ele.val
d_ele.prev.val < ::alloc_proc_num
d_ele.prev.val != ::cur_proc.next.val
d_ele.prev.val != orig(d_list.last.val)
d_ele.prev.val != orig(::cur_proc.next.val)
d_ele.prev.val != orig(::block_queue.last.val)
d_ele.val < ::alloc_proc_num
d_ele.val != ::cur_proc.next.val
d_ele.val != ::cur_proc.prev.val
d_ele.val != ::block_queue.first.val
d_ele.val != ::block_queue.last.val
d_ele.val != return.first.val
d_ele.val != return.last.val
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::alloc_proc_num > return.first.val
::alloc_proc_num > return.last.val
::alloc_proc_num > return.mem_count
::alloc_proc_num > orig(d_list.first.val)
::alloc_proc_num > orig(d_list.last.val)
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::block_queue.first.val)
::alloc_proc_num > orig(::block_queue.last.val)
::alloc_proc_num >= orig(::block_queue.mem_count)
::num_processes > ::block_queue.mem_count
::num_processes > return.mem_count
::num_processes >= orig(::block_queue.mem_count)
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val != orig(d_list.first.val)
::cur_proc.next.val != orig(::cur_proc.prev.val)
::cur_proc.next.val != orig(::block_queue.first.val)
::cur_proc.next.val != orig(::block_queue.last.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != orig(d_list.last.val)
::cur_proc.prev.val != orig(::cur_proc.next.val)
::cur_proc.prev.val <= orig(::cur_proc.prev.val)
::cur_proc.prev.val != orig(::block_queue.last.val)
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::cur_proc.prev.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.mem_count <= orig(::block_queue.mem_count)
orig(d_list.mem_count) == return.mem_count + 1
===========================================================================
std.find_nth(List *;int;)Ele *:::ENTER
f_list.first.prev == f_list.last.next
f_list.first.prev == ::block_queue.first.prev
f_list.first.prev == ::block_queue.last.next
f_list.last.next == ::block_queue.first.prev
f_list.last.next == ::block_queue.last.next
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
f_list != null
f_list.first.prev == null
f_list.first.val >= 0
f_list.last.next == null
f_list.last.val >= 0
f_list.mem_count >= 0
n >= 1
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
f_list.first.val < ::alloc_proc_num
f_list.first.val != ::cur_proc.next.val
f_list.last.val < ::alloc_proc_num
f_list.last.val != ::cur_proc.prev.val
f_list.mem_count <= ::alloc_proc_num
f_list.mem_count <= ::num_processes
n <= ::alloc_proc_num
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.find_nth(List *;int;)Ele *:::EXIT5
===========================================================================
std.find_nth(List *;int;)Ele *:::EXIT
f_list == orig(f_list)
f_list.first == orig(f_list.first)
f_list.first.next == orig(f_list.first.next)
f_list.first.prev == f_list.last.next
f_list.first.prev == ::block_queue.first.prev
f_list.first.prev == ::block_queue.last.next
f_list.first.prev == orig(f_list.first.prev)
f_list.first.val == orig(f_list.first.val)
f_list.last == orig(f_list.last)
f_list.last.next == ::block_queue.first.prev
f_list.last.next == ::block_queue.last.next
f_list.last.next == orig(f_list.last.next)
f_list.last.prev == orig(f_list.last.prev)
f_list.last.val == orig(f_list.last.val)
f_list.mem_count == orig(f_list.mem_count)
n == orig(n)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc.next == orig(::cur_proc.next)
::cur_proc.next.next == orig(::cur_proc.next.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.prev.prev == orig(::cur_proc.prev.prev)
::cur_proc.prev.val == orig(::cur_proc.prev.val)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
return == return.next.prev
return == return.prev.next
return.next.prev == return.prev.next
f_list != null
f_list.first.prev == null
f_list.first.val >= 0
f_list.last.next == null
f_list.last.val >= 0
f_list.mem_count >= 0
n >= 1
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return.next.prev != null
return.next.val >= 0
return.prev.next != null
return.prev.val >= 0
return.val >= 0
f_list.first.val < ::alloc_proc_num
f_list.first.val != ::cur_proc.next.val
f_list.first.val != return.next.val
f_list.last.val < ::alloc_proc_num
f_list.last.val != ::cur_proc.prev.val
f_list.last.val != return.prev.val
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > return.next.val
::alloc_proc_num > return.prev.val
::alloc_proc_num > return.val
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val != return.prev.val
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::block_queue.first.val != return.next.val
::block_queue.last.val != return.prev.val
return.next.val != return.prev.val
return.next.val != return.val
return.prev.val != return.val
===========================================================================
std.finish_all_processes()void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.next == ::block_queue.first.next
::cur_proc.next.next == ::block_queue.first.prev
::cur_proc.next.next == ::block_queue.last.next
::cur_proc.next.next == ::block_queue.last.prev
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.next == null
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.finish_all_processes()void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == ::block_queue.mem_count
::cur_proc == ::block_queue.first.prev
::cur_proc == ::block_queue.last.next
::cur_proc == orig(::cur_proc.next.next)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::cur_proc.next.next)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::cur_proc.next.next)
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::cur_proc.next.next)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::cur_proc.next.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
::num_processes >= 0
::cur_proc == null
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes < orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count < orig(::cur_proc.next.val)
===========================================================================
std.finish_process()void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val > ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.finish_process()void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::cur_proc == ::block_queue.first.prev
::cur_proc == ::block_queue.last.next
::cur_proc == orig(::cur_proc.next)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
::num_processes >= 0
::cur_proc == null
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count < orig(::cur_proc.next.val)
===========================================================================
std.free_ele(Ele *;)void:::ENTER
ptr == ::cur_proc
ptr.next == ::cur_proc.next
ptr.next.next == ::cur_proc.next.next
ptr.next.prev == ptr.prev
ptr.next.prev == ::cur_proc.next.prev
ptr.next.prev == ::cur_proc.prev
ptr.next.prev == ::block_queue.first.prev
ptr.next.prev == ::block_queue.last.next
ptr.next.val == ::cur_proc.next.val
ptr.prev == ::cur_proc.next.prev
ptr.prev == ::cur_proc.prev
ptr.prev == ::block_queue.first.prev
ptr.prev == ::block_queue.last.next
ptr.val == ::cur_proc.val
::cur_proc.next.prev == ::cur_proc.prev
::cur_proc.next.prev == ::block_queue.first.prev
::cur_proc.next.prev == ::block_queue.last.next
::cur_proc.prev == ::block_queue.first.prev
::cur_proc.prev == ::block_queue.last.next
::block_queue.first.prev == ::block_queue.last.next
ptr != null
ptr.next.prev == null
ptr.next.val >= 0
ptr.prev == null
ptr.val >= 0
::num_processes >= 1
::cur_proc != null
::cur_proc.next.prev == null
::cur_proc.next.val >= 0
::cur_proc.prev == null
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
ptr.next.val != ptr.val
ptr.next.val < ::alloc_proc_num
ptr.next.val != ::cur_proc.val
ptr.next.val != ::block_queue.first.val
ptr.next.val != ::block_queue.last.val
ptr.val < ::alloc_proc_num
ptr.val != ::cur_proc.next.val
ptr.val != ::block_queue.first.val
ptr.val != ::block_queue.last.val
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::num_processes > ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.val != ::block_queue.first.val
::cur_proc.val != ::block_queue.last.val
===========================================================================
std.free_ele(Ele *;)void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(ptr.next.prev)
::block_queue.first.prev == orig(ptr.prev)
::block_queue.first.prev == orig(::cur_proc.next.prev)
::block_queue.first.prev == orig(::cur_proc.prev)
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(ptr.next.prev)
::block_queue.last.next == orig(ptr.prev)
::block_queue.last.next == orig(::cur_proc.next.prev)
::block_queue.last.next == orig(::cur_proc.prev)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
::num_processes >= 1
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::alloc_proc_num > orig(ptr.next.val)
::alloc_proc_num > orig(ptr.val)
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes > ::block_queue.mem_count
::block_queue.first.val != orig(ptr.next.val)
::block_queue.first.val != orig(ptr.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.first.val != orig(::cur_proc.val)
::block_queue.last.val != orig(ptr.next.val)
::block_queue.last.val != orig(ptr.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.val)
===========================================================================
std.init_prio_queue(int;int;)void:::ENTER
::alloc_proc_num == ::num_processes
::cur_proc == ::block_queue
prio one of { 1, 2, 3 }
num_proc >= 0
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc == null
::prio_queue != null
::block_queue == null
===========================================================================
std.init_prio_queue(int;int;)void:::EXIT
prio == orig(prio)
num_proc == orig(num_proc)
::alloc_proc_num == ::num_processes
::cur_proc == ::block_queue
::cur_proc == orig(::cur_proc)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
prio one of { 1, 2, 3 }
num_proc >= 0
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc == null
::prio_queue != null
::block_queue == null
===========================================================================
std.initialize()void:::ENTER
::alloc_proc_num == ::num_processes
::alloc_proc_num == ::cur_proc
::alloc_proc_num == ::block_queue
::num_processes == ::cur_proc
::num_processes == ::block_queue
::cur_proc == ::block_queue
::alloc_proc_num == 0
::num_processes == 0
::cur_proc == null
::prio_queue != null
::block_queue == null
===========================================================================
std.initialize()void:::EXIT
::alloc_proc_num == ::num_processes
::alloc_proc_num == ::cur_proc
::alloc_proc_num == ::block_queue
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == ::cur_proc
::num_processes == ::block_queue
::num_processes == orig(::num_processes)
::cur_proc == ::block_queue
::cur_proc == orig(::cur_proc)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::alloc_proc_num == 0
::num_processes == 0
::cur_proc == null
::prio_queue != null
::block_queue == null
===========================================================================
std.main(int;char **;)int:::ENTER
::alloc_proc_num == ::num_processes
::alloc_proc_num == ::cur_proc
::alloc_proc_num == ::block_queue
::num_processes == ::cur_proc
::num_processes == ::block_queue
::cur_proc == ::block_queue
argc == 4
argv != null
::alloc_proc_num == 0
::num_processes == 0
::cur_proc == null
::prio_queue != null
::block_queue == null
===========================================================================
std.main(int;char **;)int:::EXIT25
::block_queue.first.val == ::cur_proc.next.val**2
::cur_proc.next.val % ::block_queue.first.val == 0
::block_queue.last.val == ::cur_proc.next.val**2
::cur_proc.next.val % ::block_queue.last.val == 0
::block_queue.mem_count % ::cur_proc.next.val == 0
::block_queue.mem_count is a bitwise subset of ::cur_proc.next.val
===========================================================================
std.main(int;char **;)int:::EXIT
argc == orig(argc)
argv == orig(argv)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next == ::block_queue.first.prev
::cur_proc.next == ::block_queue.last.next
::cur_proc.next.prev == ::cur_proc.prev.next
::prio_queue == orig(::prio_queue)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == return
::block_queue.first.prev == orig(::alloc_proc_num)
::block_queue.first.prev == orig(::num_processes)
::block_queue.first.prev == orig(::cur_proc)
::block_queue.first.prev == orig(::block_queue)
::block_queue.last.next == return
::block_queue.last.next == orig(::alloc_proc_num)
::block_queue.last.next == orig(::num_processes)
::block_queue.last.next == orig(::cur_proc)
::block_queue.last.next == orig(::block_queue)
return == orig(::alloc_proc_num)
return == orig(::num_processes)
return == orig(::cur_proc)
return == orig(::block_queue)
argc == 4
argv != null
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return == 0
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::alloc_proc_num >= return
::num_processes >= ::block_queue.mem_count
::num_processes >= return
::block_queue.first.val == ::cur_proc.next.val**2
::cur_proc.next.val % ::block_queue.first.val == 0
::cur_proc.next.val == ::block_queue.first.val**2
::cur_proc.next.val == ~::block_queue.first.val
::block_queue.last.val == ::cur_proc.next.val**2
::cur_proc.next.val % ::block_queue.last.val == 0
::cur_proc.next.val == ::block_queue.last.val**2
::cur_proc.next.val == ~::block_queue.last.val
::block_queue.mem_count % ::cur_proc.next.val == 0
::block_queue.mem_count is a bitwise subset of ::cur_proc.next.val
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val >= return
::cur_proc.prev.val >= orig(::alloc_proc_num)
::cur_proc.prev.val >= orig(::num_processes)
::cur_proc.val >= return
::cur_proc.val >= orig(::alloc_proc_num)
::cur_proc.val >= orig(::num_processes)
::block_queue.first.val >= return
::block_queue.first.val >= orig(::alloc_proc_num)
::block_queue.first.val >= orig(::num_processes)
::block_queue.last.val >= return
::block_queue.last.val >= orig(::alloc_proc_num)
::block_queue.last.val >= orig(::num_processes)
::block_queue.mem_count >= return
::block_queue.mem_count >= orig(::alloc_proc_num)
::block_queue.mem_count >= orig(::num_processes)
===========================================================================
std.new_ele(int;)Ele *:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
new_num >= 0
::alloc_proc_num >= 1
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num == new_num + 1
new_num >= ::num_processes
new_num > ::cur_proc.next.val
new_num > ::cur_proc.prev.val
new_num > ::cur_proc.val
new_num > ::block_queue.first.val
new_num > ::block_queue.last.val
new_num >= ::block_queue.mem_count
::alloc_proc_num > ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
===========================================================================
std.new_ele(int;)Ele *:::EXIT
new_num == return.val
new_num == orig(new_num)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc.next == orig(::cur_proc.next)
::cur_proc.next.next == orig(::cur_proc.next.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc)
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.prev.next == orig(::cur_proc)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.prev.prev == orig(::cur_proc.prev.prev)
::cur_proc.prev.val == orig(::cur_proc.prev.val)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == return.next
::block_queue.first.prev == return.prev
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == return.next
::block_queue.last.next == return.prev
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
return.next == return.prev
new_num >= 0
::alloc_proc_num >= 1
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return != null
return.next == null
return.prev == null
return.val >= 0
::alloc_proc_num == new_num + 1
new_num > ::cur_proc.next.val
new_num > ::cur_proc.prev.val
new_num >= ::cur_proc.val
new_num > ::block_queue.first.val
new_num > ::block_queue.last.val
new_num >= ::block_queue.mem_count
new_num > orig(::cur_proc.val)
::alloc_proc_num > ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
return.val == ::alloc_proc_num - 1
::alloc_proc_num > orig(::cur_proc.val)
::num_processes >= ::block_queue.mem_count
::num_processes <= return.val
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.next.val < return.val
::cur_proc.next.val != orig(::cur_proc.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
::cur_proc.prev.val < return.val
::cur_proc.prev.val != orig(::cur_proc.val)
::cur_proc.val <= return.val
::block_queue.first.val < return.val
::block_queue.last.val < return.val
::block_queue.mem_count <= return.val
return.val > orig(::cur_proc.val)
===========================================================================
std.new_list()List *:::ENTER
::cur_proc.next.prev == ::cur_proc.prev
::cur_proc.next.prev == ::block_queue
::cur_proc.prev == ::block_queue
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev == null
::cur_proc.next.val >= 0
::cur_proc.prev == null
::cur_proc.val >= 0
::prio_queue != null
::block_queue == null
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.val
::num_processes != ::cur_proc.next.val
::cur_proc.next.val != ::cur_proc.val
===========================================================================
std.new_list()List *:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == orig(::cur_proc)
::cur_proc.next == orig(::cur_proc.next)
::cur_proc.next.next == orig(::cur_proc.next.next)
::cur_proc.next.prev == ::cur_proc.prev
::cur_proc.next.prev == ::block_queue
::cur_proc.next.prev == return.first
::cur_proc.next.prev == return.last
::cur_proc.next.prev == return.mem_count
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == ::block_queue
::cur_proc.prev == return.first
::cur_proc.prev == return.last
::cur_proc.prev == return.mem_count
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == return.first
::block_queue == return.last
::block_queue == return.mem_count
::block_queue == orig(::block_queue)
return.first == return.last
return.first == return.mem_count
return.last == return.mem_count
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev == null
::cur_proc.next.val >= 0
::cur_proc.prev == null
::cur_proc.val >= 0
::prio_queue != null
::block_queue == null
return != null
return.first == null
return.last == null
return.mem_count == 0
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num >= return.mem_count
::num_processes != ::cur_proc.next.val
::num_processes >= return.mem_count
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val >= return.mem_count
::cur_proc.val >= return.mem_count
===========================================================================
std.new_process(int;)Ele *:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
prio one of { 1, 2, 3 }
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
===========================================================================
std.new_process(int;)Ele *:::EXIT
prio == orig(prio)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc.next == orig(::cur_proc.next)
::cur_proc.next.next == orig(::cur_proc.next.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc)
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.prev.next == orig(::cur_proc)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.prev.prev == orig(::cur_proc.prev.prev)
::cur_proc.prev.val == orig(::cur_proc.prev.val)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == return.next
::block_queue.first.prev == return.prev
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == return.next
::block_queue.last.next == return.prev
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
return.next == return.prev
return.val == orig(::alloc_proc_num)
prio one of { 1, 2, 3 }
::alloc_proc_num >= 1
::num_processes >= 1
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
return != null
return.next == null
return.prev == null
return.val >= 0
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
return.val == ::alloc_proc_num - 1
orig(::alloc_proc_num) == ::alloc_proc_num - 1
::alloc_proc_num > orig(::num_processes)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes > ::block_queue.mem_count
orig(::num_processes) == ::num_processes - 1
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.next.val < return.val
::cur_proc.next.val < orig(::alloc_proc_num)
::cur_proc.next.val != orig(::cur_proc.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != ::block_queue.mem_count
::cur_proc.prev.val < return.val
::cur_proc.prev.val < orig(::alloc_proc_num)
::cur_proc.prev.val != orig(::cur_proc.val)
::cur_proc.val <= return.val
::cur_proc.val <= orig(::alloc_proc_num)
::block_queue.first.val < return.val
::block_queue.first.val < orig(::alloc_proc_num)
::block_queue.last.val < return.val
::block_queue.last.val < orig(::alloc_proc_num)
::block_queue.mem_count <= return.val
::block_queue.mem_count <= orig(::alloc_proc_num)
::block_queue.mem_count <= orig(::num_processes)
return.val >= orig(::num_processes)
return.val > orig(::cur_proc.val)
===========================================================================
std.quantum_expire()void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.next.val >= 1
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::num_processes != ::cur_proc.next.val
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::block_queue.first.val == ::cur_proc.next.val - 3
::block_queue.last.val == ::cur_proc.next.val - 3
::cur_proc.next.val > ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.quantum_expire()void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.prev.next
::cur_proc.next == ::block_queue.first.prev
::cur_proc.next == ::block_queue.last.next
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
::num_processes >= 0
::cur_proc.next == null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes != orig(::cur_proc.next.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.first.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != orig(::cur_proc.prev.val)
::cur_proc.val != ::block_queue.first.val
::cur_proc.val != ::block_queue.last.val
::cur_proc.val != orig(::cur_proc.next.val)
orig(::cur_proc.next.val) == ::block_queue.first.val + 3
orig(::cur_proc.next.val) == ::block_queue.last.val + 3
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count < orig(::cur_proc.next.val)
===========================================================================
std.schedule()void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val > ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.schedule()void:::EXIT11
::num_processes >= 1
::cur_proc != null
::alloc_proc_num > ::block_queue.mem_count
::num_processes > ::block_queue.mem_count
===========================================================================
std.schedule()void:::EXIT12
::num_processes == ::block_queue.mem_count
::cur_proc == ::block_queue.first.prev
::cur_proc == ::block_queue.last.next
::cur_proc == orig(::cur_proc.next)
::block_queue.first.prev == orig(::cur_proc.next)
::block_queue.last == orig(::cur_proc.prev.next)
::block_queue.last.next == orig(::cur_proc.next)
::block_queue.last.prev == orig(::cur_proc.prev)
::block_queue.last.val == orig(::cur_proc.val)
::cur_proc == null
orig(::cur_proc.next) == null
::num_processes != orig(::cur_proc.prev.val)
::block_queue.first.val >= orig(::cur_proc.prev.val)
::block_queue.mem_count != orig(::cur_proc.prev.val)
===========================================================================
std.schedule()void:::EXIT
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc.next.prev == ::cur_proc.prev
::cur_proc.next.prev == ::block_queue.first.prev
::cur_proc.next.prev == ::block_queue.last.next
::cur_proc.prev == ::block_queue.first.prev
::cur_proc.prev == ::block_queue.last.next
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
::num_processes >= 0
::cur_proc.next.prev == null
::cur_proc.next.val >= 0
::cur_proc.prev == null
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::cur_proc.val)
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.val != ::block_queue.first.val
::cur_proc.val != ::block_queue.last.val
::cur_proc.val != orig(::cur_proc.next.val)
::block_queue.first.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count < orig(::cur_proc.next.val)
===========================================================================
std.unblock_process(float;)void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.unblock_process(float;)void:::EXIT
ratio == orig(ratio)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc == orig(::cur_proc.next.prev)
::cur_proc == orig(::cur_proc.prev.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.prev == orig(::cur_proc.prev.next)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev.next == orig(::cur_proc.next.prev)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.prev == orig(::block_queue.last.next)
::block_queue.last.next == orig(::block_queue.first.prev)
::block_queue.last.next == orig(::block_queue.last.next)
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.next.val >= 1
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > ::block_queue.mem_count
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::alloc_proc_num > orig(::block_queue.first.val)
::alloc_proc_num > orig(::block_queue.last.val)
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val != ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val != orig(::cur_proc.prev.val)
::cur_proc.next.val >= orig(::block_queue.first.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != orig(::cur_proc.next.val)
::cur_proc.prev.val != orig(::block_queue.last.val)
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::cur_proc.prev.val)
::block_queue.first.val < orig(::cur_proc.next.val)
orig(::cur_proc.next.val) % ::block_queue.first.val == 0
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.mem_count <= orig(::cur_proc.next.val)
===========================================================================
std.upgrade_process_prio(int;float;)void:::ENTER
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc.next.prev == ::cur_proc.prev.next
::block_queue.first.prev == ::block_queue.last.next
prio one of { 1, 2, 3 }
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
::alloc_proc_num >= ::num_processes
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num >= ::block_queue.mem_count
::num_processes >= ::block_queue.mem_count
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
===========================================================================
std.upgrade_process_prio(int;float;)void:::EXIT13
::cur_proc.next == orig(::cur_proc.next)
::cur_proc.next.next == orig(::cur_proc.next.next)
::cur_proc.next.val == orig(::cur_proc.next.val)
::cur_proc.prev == orig(::cur_proc.prev)
::cur_proc.prev.prev == orig(::cur_proc.prev.prev)
::cur_proc.prev.val == orig(::cur_proc.prev.val)
prio == 3
prio <= ::alloc_proc_num
prio != ::cur_proc.prev.val
::alloc_proc_num > ::block_queue.mem_count
::num_processes != ::cur_proc.next.val
::num_processes != ::cur_proc.prev.val
::cur_proc.next.val % ::block_queue.first.val == 0
::cur_proc.prev.val >= ::block_queue.first.val
::cur_proc.val >= ::block_queue.first.val
===========================================================================
std.upgrade_process_prio(int;float;)void:::EXIT14
prio one of { 1, 2 }
prio < ::cur_proc.next.val
prio != orig(::cur_proc.next.val)
::cur_proc.next.val > ::block_queue.mem_count
::block_queue.mem_count < orig(::cur_proc.next.val)
===========================================================================
std.upgrade_process_prio(int;float;)void:::EXIT
prio == orig(prio)
ratio == orig(ratio)
::alloc_proc_num == orig(::alloc_proc_num)
::num_processes == orig(::num_processes)
::cur_proc == ::cur_proc.next.prev
::cur_proc == ::cur_proc.prev.next
::cur_proc == orig(::cur_proc)
::cur_proc == orig(::cur_proc.next.prev)
::cur_proc == orig(::cur_proc.prev.next)
::cur_proc.next.prev == ::cur_proc.prev.next
::cur_proc.next.prev == orig(::cur_proc.next.prev)
::cur_proc.next.prev == orig(::cur_proc.prev.next)
::cur_proc.prev.next == orig(::cur_proc.next.prev)
::cur_proc.prev.next == orig(::cur_proc.prev.next)
::cur_proc.val == orig(::cur_proc.val)
::prio_queue == orig(::prio_queue)
::block_queue == orig(::block_queue)
::block_queue.first == orig(::block_queue.first)
::block_queue.first.next == orig(::block_queue.first.next)
::block_queue.first.prev == ::block_queue.last.next
::block_queue.first.prev == orig(::block_queue.first.prev)
::block_queue.first.val == orig(::block_queue.first.val)
::block_queue.last == orig(::block_queue.last)
::block_queue.last.next == orig(::block_queue.last.next)
::block_queue.last.prev == orig(::block_queue.last.prev)
::block_queue.last.val == orig(::block_queue.last.val)
::block_queue.mem_count == orig(::block_queue.mem_count)
prio one of { 1, 2, 3 }
::alloc_proc_num >= 0
::num_processes >= 0
::cur_proc.next.prev != null
::cur_proc.prev.next != null
::cur_proc.prev.val >= 0
::cur_proc.val >= 0
::prio_queue != null
::block_queue.first.prev == null
::block_queue.first.val >= 0
::block_queue.last.next == null
::block_queue.last.val >= 0
::block_queue.mem_count >= 0
prio <= ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.next.val
::alloc_proc_num > ::cur_proc.prev.val
::alloc_proc_num > ::cur_proc.val
::alloc_proc_num > ::block_queue.first.val
::alloc_proc_num > ::block_queue.last.val
::alloc_proc_num > orig(::cur_proc.next.val)
::alloc_proc_num > orig(::cur_proc.prev.val)
::cur_proc.next.val != ::cur_proc.prev.val
::cur_proc.next.val != ::cur_proc.val
::cur_proc.next.val > ::block_queue.first.val
::cur_proc.next.val != ::block_queue.last.val
::cur_proc.next.val >= ::block_queue.mem_count
::cur_proc.next.val <= orig(::cur_proc.next.val)
::cur_proc.next.val != orig(::cur_proc.prev.val)
::cur_proc.prev.val != ::cur_proc.val
::cur_proc.prev.val != ::block_queue.last.val
::cur_proc.prev.val != orig(::cur_proc.next.val)
::cur_proc.prev.val <= orig(::cur_proc.prev.val)
::cur_proc.val != orig(::cur_proc.next.val)
::cur_proc.val != orig(::cur_proc.prev.val)
::block_queue.first.val < orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.next.val)
::block_queue.last.val != orig(::cur_proc.prev.val)
::block_queue.mem_count <= orig(::cur_proc.next.val)
