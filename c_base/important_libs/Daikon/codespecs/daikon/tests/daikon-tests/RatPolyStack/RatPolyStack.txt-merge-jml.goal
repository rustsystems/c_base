package PolyCalc;

/** simple cons cell record type. */
class Cons {

    /*@ invariant this.head != null; */
    /*@ invariant this.tail.head != null; */
    /*@ invariant this.tail.tail.head != null; */
    // FSK would make this an inner class of RatPolyStack, but I'm
    // trying to keep learning curve low...

    /*@ spec_public */ RatPoly head;
    /*@ spec_public */ Cons tail;
    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires h != null;
    @ requires t.head != null;
    @ requires t.tail.head != null;
    @ ensures this.head == \old(h);
    @ ensures this.tail == \old(t);
    @ ensures this.tail.head == t.head;
    @ ensures this.tail.tail == t.tail;
    @ ensures this.tail.tail.head == t.tail.head;
    @ ensures this.tail.tail.tail == t.tail.tail;
    @ ensures t.head == \old(t.head);
    @ ensures t.tail == \old(t.tail);
    @ ensures t.tail.head == \old(t.tail.head);
    @ ensures t.tail.tail == \old(t.tail.tail);
    @ ensures t.head != null;
    @ ensures t.tail.head != null;
    @*/
    Cons(RatPoly h, Cons t) { head = h; tail = t; }
}

/** RatPolyStack is a mutable finite sequence of RatPoly objects.

    Each RatPolyStack can be described by [p1, p2, ... ], where [] is
    an empty stack, [p1] is a one element stack containing the Poly
    'p1', and so on.  RatPolyStacks can also be described
    constructively, with the append operation, ':'. such that [p1]:S
    is the result of putting p1 at the front of the RatPolyStack S.

    A finite sequence Q has an associated size, notated in these specs
    as the function size-of(Q).  Thus "size-of([]) = 0",
    "size-of([p1]) = 1", "size-of([p1, p1]) = 2", and so on.

 */
public class RatPolyStack {

    /*@ invariant this.polys.head != null; */
    /*@ invariant this.polys.tail.head != null; */
    /*@ invariant this.size >= 0; */
    /*@ spec_public */ private Cons polys; // head of list
    /*@ spec_public */ private int size;

    /*@
    @ public normal_behavior // Generated by Daikon
    @ ensures this.polys == null;
    @ ensures this.size == 0;
    @*/
    // Definitions:
    // For a Cons c, let Seq(c) be [] if c == null,
    //                             [c.head]:Seq(c.tail) otherwise
    //                   Count(c) be 0 if c == null,
    //                               1 + Count(c.tail) otherwise
    //

    // (( These are helper functions that will make it easier for us
    // to write the remainder of the specifications.  They are
    // seperated out because the nature of this representation lends
    // itself to analysis by recursive functions.  ))

    // Abstraction Function:
    // A RatPolyStack s is Seq(s.polys)

    // (( This explains how we can understand what a Stack is from its
    // 'polys' field.  (Though in truth, the real understanding comes
    // from grokking the List helper function).  ))

    // RepInvariant:
    // s.size == Count(s.polys)

    // (( This defines how the 'size' field relates to the 'polys'
    // field.  Notice that s.polys != null is *not* a given Invariant;
    // this class, unlike the RatPoly class, allows for one of its
    // fields to reference null, and thus your method implementations
    // should not assume that the 'polys' field will be non-null on
    // entry to the method, unless some other aspect of the method
    // will enforce this condition. ))

    // FSK: META-note: some students might ask why we had to define
    // Count(c) when we already have the "size-of(Q)" function given.
    // I was going to make an argument about being allowed to apply
    // the abstraction function, etc, but I now think it might
    // actually be legal to say size-of(Seq(s.polys)), because
    // no-where in there do we apply the AF to a RatPolyStack...

    /** @effects: Constructs a new RatPolyStack, [].
     */
    public RatPolyStack() {
	// IMPL IS STAFF ONLY
	polys = null; size = 0;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires p != null;
    @ ensures this.polys.head == \old(p);
    @ ensures this.polys.tail == \old(this.polys);
    @ ensures this.polys.tail.head == \old(this.polys.head);
    @ ensures this.polys.tail.tail == \old(this.polys.tail);
    @ ensures this.polys != null;
    @ ensures this.size >= 1;
    @ ensures this.size - \old(this.size) - 1 == 0;
    @*/
    /** Pushes a RatPoly onto the top of this.
	@modifies: this
	@effects: this_post = [p]:this
     */
    public void push(RatPoly p) {
	// IMPL IS STAFF ONLY
	polys = new Cons(p, polys); size++;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.polys != null;
    @ requires this.size >= 1;
    @ ensures this.polys == \old(this.polys.tail);
    @ ensures this.polys.head == \old(this.polys.tail.head);
    @ ensures this.polys.tail == \old(this.polys.tail.tail);
    @ ensures \result == \old(this.polys.head);
    @ ensures \result != null;
    @ ensures this.size - \old(this.size) + 1 == 0;
    @*/
    /** Returns the top RatPoly.
	@requires: size-of(this) > 0
	@modifies: this
	@effects: If this = [p]:S
	          then this_post = S && returns p
    */
    public RatPoly pop()  {
	// IMPL IS STAFF ONLY
	if (size <= 0)
	    throw new RuntimeException("!pop on size"+size);

	RatPoly p = polys.head;
	polys = polys.tail;
	size--;
	return p;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.size == 1 || this.size == 2 || this.size == 3;
    @ ensures this.polys.head == this.polys.tail.head;
    @ ensures this.polys.head == \old(this.polys.head);
    @ ensures this.polys.tail == \old(this.polys);
    @ ensures this.polys.tail.tail == \old(this.polys.tail);
    @ ensures this.size == 2 || this.size == 3 || this.size == 4;
    @*/
    /** Duplicates the top RatPoly on this.
	@requires: size-of(this) > 0
	@modifies: this
	@effects: If this = [p]:S
	          then this_post = [p, p]:S
    */
    public void dup()  {
	// IMPL IS STAFF ONLY
	if (size <= 0)
	    throw new RuntimeException("!dup on size"+size);

	polys = new Cons(polys.head, polys);
	size++;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.size == 2 || this.size == 3;
    @ ensures this.polys == \old(this.polys.tail);
    @ ensures this.polys.head == \old(this.polys.tail.head);
    @ ensures this.polys.tail == \old(this.polys);
    @ ensures this.polys.tail.head == \old(this.polys.head);
    @ ensures this.polys.tail.tail == \old(this.polys.tail.tail);
    @ ensures this.size == \old(this.size);
    @ ensures this.size == 2 || this.size == 3;
    @*/
    /** Swaps the top two elements of this.
	@requires: size-of(this) >= 2
	@modifies: this
	@effects: If this = [p1, p2]:S
	          then this_post = [p2, p1]:S
    */
    public void swap() {
	// IMPL IS STAFF ONLY
	if (size <= 1)
	    throw new RuntimeException("!swap on size"+size);

	Cons c1 = polys;
	Cons c2 = polys.tail;
	c1.tail = c2.tail;
	c2.tail = c1;
	polys = c2;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.polys.head != null;
    @ requires this.size == 3;
    @ ensures this.polys == null;
    @ ensures this.size == 0;
    @*/
    /** Clears the stack.
	@modifies: this
	@effects: this_post = []
    */
    public void clear() {
	// IMPL IS STAFF ONLY
        polys = null;
        size = 0;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.polys != null;
    @ requires this.size >= 1;
    @ requires index >= 0;
    @ requires this.size > index;
    @ ensures this.polys == \old(this.polys);
    @ ensures this.polys.head == \old(this.polys.head);
    @ ensures this.polys.tail == \old(this.polys.tail);
    @ ensures this.polys.tail.head == \old(this.polys.tail.head);
    @ ensures this.polys.tail.tail == \old(this.polys.tail.tail);
    @ ensures this.size == \old(this.size);
    @ ensures this.polys != null;
    @ ensures this.size >= 1;
    @ ensures \result != null;
    @ ensures this.size > \old(index);
    @*/
    /** Returns the RatPoly that is 'index' elements from the top of
	the stack.
	@requires: index < size-of(this)
	@effects: If this = S:[p]:T where size-of(S) = index, then
	          returns p.
    */
    public RatPoly get(int index) {
	// IMPL IS STAFF ONLY
	if (size <= index)
	    throw new RuntimeException("!get("+index+" on size"+size);

	return getCons(index).head;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.size == 2 || this.size == 3;
    @ ensures this.polys.tail == \old(this.polys.tail.tail);
    @ ensures this.polys.tail.tail == null;
    @ ensures this.size == 1 || this.size == 2;
    @*/
    /** Adds the top two elements of this, placing the result on top
	of the stack. 
        @requires: size-of(this) >= 2
	@modifies: this
	@effects:  If this = [p1, p2]:S
                   then this_post = [p3]:S
                   where p3 = p1 + p2
    */
    public void add()
    {
	RatPoly r1 = pop();
	RatPoly r2 = pop();
        RatPoly r3 = r2.add(r1);
        push(r3);
    }
    
    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.size == 2 || this.size == 3 || this.size == 4;
    @ ensures this.polys.tail == \old(this.polys.tail.tail);
    @ ensures this.size == 1 || this.size == 2 || this.size == 3;
    @*/
    /** Subtracts the top poly from the next from top poly, placing
	the result on top of the stack.
        @requires: size-of(this) >= 2
	@modifies: this
	@effects:  If this = [p1, p2]:S
                   then this_post = [p3]:S
                   where p3 = p2 - p1
    */
    public void sub()
    {
	RatPoly r1 = pop();
        RatPoly r2 = pop();
        RatPoly r3 = r2.sub(r1);
        push(r3);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this.size == 2 || this.size == 3;
    @ ensures this.polys.tail == \old(this.polys.tail.tail);
    @ ensures this.polys.tail.tail == null;
    @ ensures this.size == 1 || this.size == 2;
    @*/
    /** Multiplies top two elements of this, placing the result on
	top of the stack. 
	@requires: size-of(this) >= 2
	@modifies: this
	@effects:  If this = [p1, p2]:S
                   then this_post = [p3]:S
                   where p3 = p1 * p2
    */
    public void mul()
    {
	RatPoly r1 = pop();
        RatPoly r2 = pop();
        RatPoly r3 = r2.mul(r1);
        push(r3);
     }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.size == 2 || this.size == 3 || this.size == 4;
    @ ensures this.polys.tail == \old(this.polys.tail.tail);
    @ ensures this.size == 1 || this.size == 2 || this.size == 3;
    @*/
    /** Divides the next from top poly by the top poly, placing the
	result on top of the stack.
	@requires: size-of(this) >= 2
	@modifies: this
	@effects:  If this = [p1, p2]:S
                   then this_post = [p3]:S
                   where p3 = p2 / p1
    */
    public void div()
    {
	RatPoly r1 = pop();
        RatPoly r2 = pop();
        RatPoly r3 = r2.div(r1);
        push(r3);
    }


    /*@
    @ public normal_behavior // Generated by Daikon
    @ ensures this.polys == \old(this.polys);
    @ ensures this.polys.head == \old(this.polys.head);
    @ ensures this.polys.tail == \old(this.polys.tail);
    @ ensures this.polys.tail.head == \old(this.polys.tail.head);
    @ ensures this.polys.tail.tail == \old(this.polys.tail.tail);
    @ ensures this.size == \result;
    @ ensures \result == \old(this.size);
    @ ensures \result >= 0;
    @*/
    /** @return size-of(this)
     */
    public int size() {
	// IMPL IS STAFF ONLY
	return size;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this.polys != null;
    @ requires this.size >= 1;
    @ requires index >= 0;
    @ requires this.size > index;
    @ ensures this.polys == \old(this.polys);
    @ ensures this.polys.head == \old(this.polys.head);
    @ ensures this.polys.tail == \old(this.polys.tail);
    @ ensures this.polys.tail.head == \old(this.polys.tail.head);
    @ ensures this.polys.tail.tail == \old(this.polys.tail.tail);
    @ ensures this.size == \old(this.size);
    @ ensures this.polys != null;
    @ ensures this.size >= 1;
    @ ensures \result != null;
    @ ensures \result.head != null;
    @ ensures \result.tail.head != null;
    @ ensures this.size > \old(index);
    @*/
    // METHOD IS STAFF ONLY
    // helper method
    private Cons getCons(int index) {
	final int index_orig = index;
	Cons curr = polys;
	while(index > 0) {
	    if (curr == null) {
		throw new RuntimeException
		    ("getCons ran out of elems, "+
		     "index:"+index+" index_orig:"+index_orig);
	    }

	    curr = curr.tail;
	    index--;

	    if (curr == null) {
		throw new RuntimeException
		    ("getCons ran out of elems, "+
		     "index:"+index+" index_orig:"+index_orig);
	    }
	}
	return curr;
    }
}
