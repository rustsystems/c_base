===========================================================================
PolyCalc.Cons:::OBJECT
this.head != null
this.tail.head != null
this.tail.tail.head != null
===========================================================================
PolyCalc.Cons.Cons(PolyCalc.RatPoly, PolyCalc.Cons):::ENTER
h != null
t.head != null
t.tail.head != null
===========================================================================
PolyCalc.Cons.Cons(PolyCalc.RatPoly, PolyCalc.Cons):::EXIT
this.head == orig(h)
this.tail == orig(t)
this.tail.head == t.head
this.tail.tail == t.tail
this.tail.tail.head == t.tail.head
this.tail.tail.tail == t.tail.tail
t.head == orig(t.head)
t.tail == orig(t.tail)
t.tail.head == orig(t.tail.head)
t.tail.tail == orig(t.tail.tail)
t.head != null
t.tail.head != null
===========================================================================
PolyCalc.RatPolyStack:::OBJECT
this.polys.head != null
this.polys.tail.head != null
this.size >= 0
===========================================================================
PolyCalc.RatPolyStack.RatPolyStack():::EXIT
this.polys == null
this.size == 0
===========================================================================
PolyCalc.RatPolyStack.add():::ENTER
(this.polys.tail.tail == null)  <==>  (this.size == 2)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.add():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.add():::ENTER;condition="size <= 1"
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.add():::ENTER;condition="not(size <= 1)"
this.polys.head has only one value
this.size == 3
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT
this.polys.tail == orig(this.polys.tail.tail)
(this.polys.tail == null)  <==>  (orig(this.size) == 2)
(this.polys.tail == null)  <==>  (this.size == 1)
this.polys.tail.tail == null
this.size one of { 1, 2 }
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT;condition="not(size <= 0)"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size one of { 1, 2 }
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT;condition="not(orig(size <= 1))"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size one of { 1, 2 }
orig(this.size) one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT;condition="size <= 1"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail == null
this.size == 1
===========================================================================
PolyCalc.RatPolyStack.add():::EXIT;condition="not(size <= 1)"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.clear():::ENTER
this.polys.head has only one value
this.size == 3
===========================================================================
PolyCalc.RatPolyStack.clear():::ENTER;condition="size <= 0"
===========================================================================
PolyCalc.RatPolyStack.clear():::ENTER;condition="size <= 1"
this.polys.head has only one value
this.size == 3
===========================================================================
PolyCalc.RatPolyStack.clear():::EXIT
this.polys == null
this.size == 0
===========================================================================
PolyCalc.RatPolyStack.clear():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.clear():::EXIT;condition="size <= 0"
this.polys == null
this.size == 0
===========================================================================
PolyCalc.RatPolyStack.clear():::EXIT;condition="not(orig(size <= 1))"
this.polys == null
this.size == 0
orig(this.polys.head) has only one value
orig(this.size) == 3
===========================================================================
PolyCalc.RatPolyStack.clear():::EXIT;condition="size <= 1"
this.polys == null
this.size == 0
===========================================================================
PolyCalc.RatPolyStack.div():::ENTER
(this.polys.tail.tail == null)  <==>  (this.size == 2)
(this.polys.tail.tail == null)  ==>  (this.polys has only one value)
(this.polys.tail.tail == null)  ==>  (this.polys.head has only one value)
(this.polys.tail.tail == null)  ==>  (this.polys.tail has only one value)
(this.polys.tail.tail == null)  ==>  (this.polys.tail.head has only one value)
this has only one value
this.size one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.div():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.div():::ENTER;condition="size <= 1"
this has only one value
this.polys has only one value
this.polys.head has only one value
this.polys.tail has only one value
this.polys.tail.head has only one value
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.div():::ENTER;condition="not(size <= 1)"
this has only one value
this.size one of { 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT
this.polys.tail == orig(this.polys.tail.tail)
(this.polys.tail == null)  <==>  (orig(this.size) == 2)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (orig(this.polys) has only one value)
(this.polys.tail == null)  ==>  (orig(this.polys.head) has only one value)
(this.polys.tail == null)  ==>  (orig(this.polys.tail) has only one value)
(this.polys.tail == null)  ==>  (orig(this.polys.tail.head) has only one value)
(this.polys.tail == null)  ==>  (this.polys has only one value)
(this.polys.tail == null)  ==>  (this.polys.head has only one value)
this.size one of { 1, 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT;condition="not(size <= 0)"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 1, 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT;condition="not(orig(size <= 1))"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 1, 2, 3 }
orig(this) has only one value
orig(this.size) one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT;condition="size <= 1"
this.polys.tail == orig(this.polys.tail.tail)
this.polys has only one value
this.polys.head has only one value
this.polys.tail == null
this.size == 1
===========================================================================
PolyCalc.RatPolyStack.div():::EXIT;condition="not(size <= 1)"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.dup():::ENTER
this.size one of { 1, 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.dup():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.dup():::EXIT
this.polys.head == this.polys.tail.head
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys)
this.polys.tail.tail == orig(this.polys.tail)
this.size one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.dup():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.dup():::EXIT;condition="not(size <= 0)"
this.polys.head == this.polys.tail.head
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys)
this.polys.tail.tail == orig(this.polys.tail)
this.size one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.get(int):::ENTER
(this.polys.tail != null)  <==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (index == 0)
(this.polys.tail == null)  ==>  (index is a pointer)
this.polys != null
this.size >= 1
index >= 0
this.size > index
===========================================================================
PolyCalc.RatPolyStack.get(int):::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.get(int):::ENTER;condition="size <= 1"
this.polys != null
this.polys.head != null
this.polys.tail == null
this.size == 1
index == 0
===========================================================================
PolyCalc.RatPolyStack.get(int):::ENTER;condition="not(size <= 1)"
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
index >= 0
this.size > index
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
(this.polys.tail != null)  <==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (orig(index) == 0)
(this.polys.tail == null)  ==>  (orig(index) is a pointer)
(this.polys.tail == null)  ==>  (this.polys.head == return)
this.polys != null
this.size >= 1
return != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(size <= 0)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="orig(size <= 1)"
this.polys == orig(this.polys)
this.polys.head == return
this.polys.tail == orig(this.polys.tail)
this.size == orig(this.size)
return == orig(this.polys.head)
this.polys != null
this.polys.tail == null
this.size == 1
return != null
orig(index) == 0
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(orig(size <= 1))"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
return != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="size <= 1"
this.polys == orig(this.polys)
this.polys.head == return
this.polys.tail == orig(this.polys.tail)
this.size == orig(this.size)
return == orig(this.polys.head)
this.polys != null
this.polys.tail == null
this.size == 1
return != null
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(size <= 1)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
return != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(orig(size <= index))"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.get(int):::EXIT;condition="not(size <= index)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::ENTER
(this.polys.tail != null)  <==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (index == 0)
(this.polys.tail == null)  ==>  (index is a pointer)
this.polys != null
this.size >= 1
index >= 0
this.size > index
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::ENTER;condition="size <= 1"
this.polys != null
this.polys.head != null
this.polys.tail == null
this.size == 1
index == 0
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::ENTER;condition="not(size <= 1)"
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
index >= 0
this.size > index
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::ENTER;condition="not(size <= index)"
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
index >= 0
this.size > index
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
(orig(index) == 0)  <==>  (index == orig(index))
(orig(index) == 0)  ==>  (orig(index) is a pointer)
(orig(index) == 0)  ==>  (this.polys == return)
(orig(index) == 0)  ==>  (this.polys.head == return.head)
(orig(index) == 0)  ==>  (this.polys.tail == return.tail)
(orig(index) == 0)  ==>  (this.polys.tail.head == return.tail.head)
(orig(index) == 0)  ==>  (this.polys.tail.tail == return.tail.tail)
(orig(index) == 0)  ==>  (this.size >= 1)
(orig(index) one of { 1, 2, 3 })  <==>  (index < orig(index))
(orig(index) one of { 1, 2, 3 })  ==>  (this.polys.tail != null)
(orig(index) one of { 1, 2, 3 })  ==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  <==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (return.tail.head != null)
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (index == orig(index))
(this.polys.tail == null)  ==>  (orig(index) == 0)
(this.polys.tail == null)  ==>  (orig(index) is a pointer)
(this.polys.tail == null)  ==>  (return.tail == null)
(this.polys.tail == null)  ==>  (this.polys == return)
(this.polys.tail == null)  ==>  (this.polys.head == return.head)
(this.polys.tail == null)  ==>  (this.polys.tail == return.tail)
this.polys != null
this.size >= 1
return != null
return.head != null
return.tail.head != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(size <= 0)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
return.head != null
return.tail.head != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="orig(size <= 1)"
this.polys == return
this.polys.head == return.head
this.polys.tail == return.tail
this.size == orig(this.size)
return == orig(this.polys)
return.head == orig(this.polys.head)
return.tail == orig(this.polys.tail)
this.size == 1
return != null
return.head != null
return.tail == null
orig(index) == 0
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(orig(size <= 1))"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
return != null
return.head != null
return.tail.head != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="size <= 1"
this.polys == return
this.polys.head == return.head
this.polys.tail == return.tail
this.size == orig(this.size)
return == orig(this.polys)
return.head == orig(this.polys.head)
return.tail == orig(this.polys.tail)
this.size == 1
return != null
return.head != null
return.tail == null
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(size <= 1)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
return != null
return.head != null
return.tail.head != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(orig(size <= index))"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
return.head != null
return.tail.head != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(size <= index)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
return.head != null
return.tail.head != null
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(index > 0)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size >= 1
return != null
return.head != null
return.tail.head != null
orig(index) >= 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="orig(index > 0)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
return != null
return.head != null
return.tail.head != null
orig(index) one of { 1, 2, 3 }
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.getCons(int):::EXIT;condition="not(orig(index > 0))"
this.polys == return
this.polys.head == return.head
this.polys.tail == return.tail
this.polys.tail.head == return.tail.head
this.polys.tail.tail == return.tail.tail
this.size == orig(this.size)
return == orig(this.polys)
return.head == orig(this.polys.head)
return.tail == orig(this.polys.tail)
return.tail.head == orig(this.polys.tail.head)
return.tail.tail == orig(this.polys.tail.tail)
this.size >= 1
return != null
return.head != null
return.tail.head != null
orig(index) == 0
this.size > orig(index)
===========================================================================
PolyCalc.RatPolyStack.mul():::ENTER
(this.polys.tail.tail == null)  <==>  (this.size == 2)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.mul():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.mul():::ENTER;condition="size <= 1"
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.mul():::ENTER;condition="not(size <= 1)"
this.polys.head has only one value
this.size == 3
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT
this.polys.tail == orig(this.polys.tail.tail)
(this.polys.tail == null)  <==>  (orig(this.size) == 2)
(this.polys.tail == null)  <==>  (this.size == 1)
this.polys.tail.tail == null
this.size one of { 1, 2 }
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT;condition="not(size <= 0)"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size one of { 1, 2 }
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT;condition="not(orig(size <= 1))"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size one of { 1, 2 }
orig(this.size) one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT;condition="size <= 1"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail == null
this.size == 1
===========================================================================
PolyCalc.RatPolyStack.mul():::EXIT;condition="not(size <= 1)"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.pop():::ENTER
this.polys != null
this.size >= 1
===========================================================================
PolyCalc.RatPolyStack.pop():::EXIT
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys.tail.tail)
return == orig(this.polys.head)
(this.polys != null)  <==>  (orig(this.size) one of { 2, 3, 4 })
(this.polys != null)  <==>  (this.size one of { 1, 2, 3 })
(this.polys != null)  ==>  (this.polys.head != null)
(this.polys != null)  ==>  (this.polys.tail.head != null)
(this.polys == null)  <==>  (orig(this.size) == 1)
(this.polys == null)  <==>  (this.size == 0)
(this.polys == null)  ==>  (this.size is a pointer)
return != null
this.size - orig(this.size) + 1 == 0
===========================================================================
PolyCalc.RatPolyStack.pop():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.pop():::EXIT;condition="size <= 0"
this.polys == orig(this.polys.tail)
return == orig(this.polys.head)
this.polys == null
this.size == 0
orig(this.size) == 1
===========================================================================
PolyCalc.RatPolyStack.pop():::EXIT;condition="not(size <= 0)"
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys.tail.tail)
return == orig(this.polys.head)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
this.size one of { 1, 2, 3 }
return != null
orig(this.polys) != null
orig(this.size) one of { 2, 3, 4 }
this.size < orig(this.size)
===========================================================================
PolyCalc.RatPolyStack.push(PolyCalc.RatPoly):::ENTER
p != null
===========================================================================
PolyCalc.RatPolyStack.push(PolyCalc.RatPoly):::EXIT
this.polys.head == orig(p)
this.polys.tail == orig(this.polys)
this.polys.tail.head == orig(this.polys.head)
this.polys.tail.tail == orig(this.polys.tail)
this.polys != null
this.size >= 1
this.size - orig(this.size) - 1 == 0
===========================================================================
PolyCalc.RatPolyStack.size():::ENTER
(this.polys != null)  <==>  (this.size >= 1)
(this.polys != null)  ==>  (this.polys.head != null)
(this.polys != null)  ==>  (this.polys.tail.head != null)
(this.polys == null)  <==>  (this.size == 0)
(this.polys == null)  ==>  (this.size is a pointer)
(this.polys.tail != null)  <==>  (this.size one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (this.polys != null)
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (this.size one of { 0, 1 })
===========================================================================
PolyCalc.RatPolyStack.size():::ENTER;condition="size <= 0"
this.polys == null
this.size == 0
===========================================================================
PolyCalc.RatPolyStack.size():::ENTER;condition="not(size <= 0)"
this.polys != null
this.size >= 1
===========================================================================
PolyCalc.RatPolyStack.size():::ENTER;condition="size <= 1"
this.polys.head != null
this.polys.tail == null
this.size one of { 0, 1 }
===========================================================================
PolyCalc.RatPolyStack.size():::ENTER;condition="not(size <= 1)"
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
this.size one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == return
return == orig(this.size)
(this.polys != null)  <==>  (return >= 1)
(this.polys != null)  ==>  (this.polys.head != null)
(this.polys != null)  ==>  (this.polys.tail.head != null)
(this.polys == null)  <==>  (return == 0)
(this.polys == null)  ==>  (return is a pointer)
(this.polys.tail != null)  <==>  (return one of { 2, 3, 4 })
(this.polys.tail != null)  ==>  (this.polys != null)
(this.polys.tail != null)  ==>  (this.polys.tail.head != null)
(this.polys.tail == null)  <==>  (return one of { 0, 1 })
return >= 0
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="orig(size <= 0)"
this.polys == null
return == 0
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="not(orig(size <= 0))"
this.polys != null
return >= 1
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="size <= 0"
this.polys == orig(this.polys)
this.size == return
return == orig(this.size)
this.polys == null
return == 0
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="not(size <= 0)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == return
return == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail.head != null
return >= 1
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="orig(size <= 1)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.size == return
return == orig(this.size)
this.polys.head != null
this.polys.tail == null
return one of { 0, 1 }
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="not(orig(size <= 1))"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == return
return == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
return one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="size <= 1"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.size == return
return == orig(this.size)
this.polys.head != null
this.polys.tail == null
return one of { 0, 1 }
===========================================================================
PolyCalc.RatPolyStack.size():::EXIT;condition="not(size <= 1)"
this.polys == orig(this.polys)
this.polys.head == orig(this.polys.head)
this.polys.tail == orig(this.polys.tail)
this.polys.tail.head == orig(this.polys.tail.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == return
return == orig(this.size)
this.polys != null
this.polys.head != null
this.polys.tail != null
this.polys.tail.head != null
return one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.sub():::ENTER
(this.polys.tail.tail == null)  <==>  (this.size == 2)
(this.polys.tail.tail == null)  ==>  (this.polys.tail.head has only one value)
this.size one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.sub():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.sub():::ENTER;condition="size <= 1"
this.polys.tail.head has only one value
this.polys.tail.tail == null
this.size == 2
===========================================================================
PolyCalc.RatPolyStack.sub():::ENTER;condition="not(size <= 1)"
this.size one of { 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT
this.polys.tail == orig(this.polys.tail.tail)
(this.polys.tail == null)  <==>  (orig(this.size) == 2)
(this.polys.tail == null)  <==>  (this.size == 1)
(this.polys.tail == null)  ==>  (orig(this.polys.tail.head) has only one value)
this.size one of { 1, 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT;condition="not(size <= 0)"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 1, 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT;condition="not(orig(size <= 1))"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 1, 2, 3 }
orig(this.size) one of { 2, 3, 4 }
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT;condition="size <= 1"
this.polys.tail == orig(this.polys.tail.tail)
this.polys.tail == null
this.size == 1
===========================================================================
PolyCalc.RatPolyStack.sub():::EXIT;condition="not(size <= 1)"
this.polys.tail == orig(this.polys.tail.tail)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.swap():::ENTER
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.swap():::ENTER;condition="not(size <= 0)"
===========================================================================
PolyCalc.RatPolyStack.swap():::EXIT
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys)
this.polys.tail.head == orig(this.polys.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.swap():::EXIT;condition="not(orig(size <= 0))"
===========================================================================
PolyCalc.RatPolyStack.swap():::EXIT;condition="not(size <= 0)"
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys)
this.polys.tail.head == orig(this.polys.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.swap():::EXIT;condition="not(orig(size <= 1))"
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys)
this.polys.tail.head == orig(this.polys.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.size one of { 2, 3 }
===========================================================================
PolyCalc.RatPolyStack.swap():::EXIT;condition="not(size <= 1)"
this.polys == orig(this.polys.tail)
this.polys.head == orig(this.polys.tail.head)
this.polys.tail == orig(this.polys)
this.polys.tail.head == orig(this.polys.head)
this.polys.tail.tail == orig(this.polys.tail.tail)
this.size == orig(this.size)
this.size one of { 2, 3 }
