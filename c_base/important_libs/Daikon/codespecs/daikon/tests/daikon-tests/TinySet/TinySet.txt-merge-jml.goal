package six170;

// Taken from 6.170 Recitation 5, Spring 2001
// Author: Jeremy Nimmer

/**
 * A TinySet is a mutable set of integers drawn from the range [0..7]
 * @specfield elements : subset of { n : integer | 0 <= n <= 7 }
 */
public class TinySet {

  /*@ invariant this.bits >= 0; */
  /*@ spec_public */ private int bits;

  /*@
  @ public normal_behavior // Generated by Daikon
  @ ensures this.bits == 0;
  @*/
  // Rep Invariant:
  //   0 <= bits <= 255

  // Abstraction Function:  a = AF(t)
  //   a.elements = { n | ((t.bits & (1 &lt;&lt; n)) != 0) }

  /**
   * @effects Creates a new, empty TinySet (this.elements_post = {})
   */
  public TinySet() {
    this.bits = 0;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires n >= 0;
  @ ensures this.bits >= 1;
  @ ensures this.bits == (\old(this.bits) | this.bits);
  @ ensures this.bits >= \old(this.bits);
  @ ensures this.bits > \old(n);
  @*/
  /**
   * @requires 0 <= n <= 7
   * @effects this.elements_post = this.elements U { n }
   */
  public void add(int n) {
    bits = bits | (1 << n);
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this != null;
  @ requires this.bits >= 1;
  @ requires n >= 0;
  @ requires this.bits > n;
  @ ensures this.bits <= \old(this.bits);
  @ ensures \old(this.bits) == (this.bits | \old(this.bits));
  @*/
  /**
   * @requires 0 <= n <= 7
   * @effects this.elements_post = this.elements - { n }
   */
  public void remove(int n) {
    bits = bits & ~(1 << n);
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires n >= 0;
  @ ensures this.bits == \old(this.bits);
  @ ensures (\result == true)  ==>  (\old(this) != null);
  @ ensures (\result == true)  ==>  (this.bits > \old(n));
  @*/
  /**
   * @requires 0 <= n <= 7
   * @returns true iff n in this.elements
   */
  public boolean contains(int n) {
    return (bits & (1 << n)) != 0;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires other != null;
  @ requires other.bits >= 0;
  @ requires (!(other.bits == 0)) || (this.bits == 0);
  @ requires (!(this.bits == 0)) || (other.bits == 0);
  @ ensures other.bits == \old(other.bits);
  @ ensures other.bits >= 0;
  @ ensures (!(other.bits == 0)) || (this.bits == 0);
  @ ensures this.bits <= other.bits;
  @ ensures other.bits == (this.bits | other.bits);
  @ ensures (!(\old(this.bits) == 0)) || (this.bits == 0);
  @ ensures this.bits <= \old(this.bits);
  @ ensures \old(this.bits) == (this.bits | \old(this.bits));
  @ ensures (!(\old(this.bits) == 0)) || (other.bits == 0);
  @ ensures (!(other.bits == 0)) || (\old(this.bits) == 0);
  @ ensures this.bits == (other.bits & \old(this.bits));
  @*/
  /**
   * @requires other != null
   * @modifies this
   * @effects this.elements_post = this.elements ^ other.elements
   */
  public void intersect(TinySet other) {
    bits = bits & other.bits;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires other != null;
  @ requires other.bits >= 0;
  @ requires (!(other.bits == 0)) || (this.bits == 0);
  @ requires (!(this.bits == 0)) || (other.bits == 0);
  @ ensures other.bits == \old(other.bits);
  @ ensures other.bits >= 0;
  @ ensures (!(other.bits == 0)) || (this.bits == 0);
  @ ensures (!(this.bits == 0)) || (other.bits == 0);
  @ ensures this.bits == (other.bits | this.bits);
  @ ensures this.bits >= other.bits;
  @ ensures (!(\old(this.bits) == 0)) || (this.bits == 0);
  @ ensures (!(this.bits == 0)) || (\old(this.bits) == 0);
  @ ensures this.bits == (\old(this.bits) | this.bits);
  @ ensures this.bits >= \old(this.bits);
  @ ensures (!(\old(this.bits) == 0)) || (other.bits == 0);
  @ ensures (!(other.bits == 0)) || (\old(this.bits) == 0);
  @ ensures this.bits == (other.bits | \old(this.bits));
  @*/
  /**
   * @requires other != null
   * @modifies this
   * @effects this.elements_post = this.elements U other.elements
   */
  public void union(TinySet other) {
    bits = bits | other.bits;
  }

}
