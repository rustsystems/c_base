===========================================================================
..assignPtrAwayBeforeFieldsInteract():::ENTER
bPtr[].a == bPtr[].cPtr[0]
aPtr has only one value
aPtr[] contains no nulls and has only one value, of length 1
aPtr[].a == [3]
aPtr[].b == [3.14159]
bPtr has only one value
bPtr[] contains no nulls and has only one value, of length 1
bPtr[].a == [5]
bPtr[].b == [1.234567]
bPtr[].cPtr contains no nulls and has only one value, of length 1
===========================================================================
..assignPtrAwayBeforeFieldsInteract():::EXIT
aPtr[] == orig(aPtr[])
aPtr[].a == orig(aPtr[].a)
aPtr[].b == orig(aPtr[].b)
bPtr[] == orig(bPtr[])
bPtr[].a == bPtr[].cPtr[0]
bPtr[].a == orig(bPtr[].a)
bPtr[].a == orig(bPtr[].cPtr[0])
bPtr[].b == orig(bPtr[].b)
bPtr[].cPtr == orig(bPtr[].cPtr)
aPtr[] contains no nulls and has only one value, of length 1
aPtr[].a == [3]
aPtr[].b == [3.14159]
bPtr[] contains no nulls and has only one value, of length 1
bPtr[].a == [5]
bPtr[].b == [1.234567]
bPtr[].cPtr contains no nulls and has only one value, of length 1
===========================================================================
..assignPtrThenFieldsInteract():::ENTER
aPtr == bPtr
aPtr[].a == bPtr[].a
aPtr[].b == bPtr[].b
aPtr has only one value
aPtr[] contains no nulls and has only one value, of length 1
aPtr[].a == [10]
aPtr[].b == [10.0]
bPtr[] contains no nulls and has only one value, of length 1
c == 10
===========================================================================
..assignPtrThenFieldsInteract():::EXIT
aPtr[] == orig(aPtr[])
aPtr[].a == bPtr[].a
aPtr[].a == orig(aPtr[].a)
aPtr[].a == orig(bPtr[].a)
aPtr[].b == bPtr[].b
aPtr[].b == orig(aPtr[].b)
aPtr[].b == orig(bPtr[].b)
bPtr[] == orig(bPtr[])
aPtr[] contains no nulls and has only one value, of length 1
aPtr[].a == [10]
aPtr[].b == [10.0]
bPtr[] contains no nulls and has only one value, of length 1
===========================================================================
..main():::EXIT
return == 0
===========================================================================
..structByPtr():::ENTER
dPtr[] == xPtr[].b
dPtr[] == yPtr[].b
xPtr[].a == xPtr[].cPtr[0]
xPtr[].a == yPtr[].a
xPtr[].a == yPtr[].cPtr[0]
xPtr[].cPtr == yPtr[].cPtr
dPtr has only one value
dPtr[] == [1.234567]
xPtr has only one value
xPtr[] contains no nulls and has only one value, of length 1
xPtr[].a == [5]
xPtr[].cPtr contains no nulls and has only one value, of length 1
yPtr has only one value
yPtr[] contains no nulls and has only one value, of length 1
===========================================================================
..structByPtr():::EXIT
dPtr[] == xPtr[].b
dPtr[] == yPtr[].b
dPtr[] == orig(dPtr[])
dPtr[] == orig(xPtr[].b)
dPtr[] == orig(yPtr[].b)
xPtr[] == orig(xPtr[])
xPtr[].a == xPtr[].cPtr[0]
xPtr[].a == yPtr[].a
xPtr[].a == yPtr[].cPtr[0]
xPtr[].a == orig(xPtr[].a)
xPtr[].a == orig(xPtr[].cPtr[0])
xPtr[].a == orig(yPtr[].a)
xPtr[].a == orig(yPtr[].cPtr[0])
xPtr[].cPtr == yPtr[].cPtr
xPtr[].cPtr == orig(xPtr[].cPtr)
xPtr[].cPtr == orig(yPtr[].cPtr)
yPtr[] == orig(yPtr[])
dPtr[] == [1.234567]
xPtr[] contains no nulls and has only one value, of length 1
xPtr[].a == [5]
xPtr[].cPtr contains no nulls and has only one value, of length 1
yPtr[] contains no nulls and has only one value, of length 1
===========================================================================
..structByValue():::ENTER
d == x.b
d == y.b
x.a == y.a
x.cPtr == y.cPtr
x.cPtr[] == y.cPtr[]
d == 1.234567
x has only one value
x.a == 5
x.cPtr has only one value
x.cPtr[] == [5]
y has only one value
===========================================================================
..structByValue():::EXIT
x.a == y.a
x.a == orig(x.a)
x.a == orig(y.a)
x.b == y.b
x.b == orig(d)
x.b == orig(x.b)
x.b == orig(y.b)
x.cPtr == y.cPtr
x.cPtr == orig(x.cPtr)
x.cPtr == orig(y.cPtr)
x.cPtr[] == y.cPtr[]
x.cPtr[] == orig(x.cPtr[])
x.cPtr[] == orig(y.cPtr[])
x.a == 5
x.b == 1.234567
x.cPtr has only one value
x.cPtr[] == [5]
