input-language C/C++
decl-version 2.0
var-comparability none

ppt ..main():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable return
    var-kind variable
    rep-type int
    dec-type int

ppt ..simple_strcpy():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable dst
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable src
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..simple_strcpy():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable dst
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable return
    var-kind variable
    rep-type string
    dec-type char*
  variable src
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testCalloc():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]

ppt ..testCalloc():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]

ppt ..testDynamicSimpleStrcpy():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable x
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable y
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testDynamicSimpleStrcpy():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable x
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable y
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testGlobalSimpleStrcpy():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable x
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable y
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testGlobalSimpleStrcpy():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable x
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable y
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testMalloc():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]

ppt ..testMalloc():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]

ppt ..testStrCalloc():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable b
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testStrCalloc():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
  variable b
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 

ppt ..testTrivial():::ENTER
  ppt-type enter
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable b
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 

ppt ..testTrivial():::EXIT0
  ppt-type subexit
  variable ::g_p
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_q
    var-kind variable
    rep-type int
    dec-type int
  variable ::g_x
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable ::g_y
    var-kind variable
    reference-type offset
    rep-type string
    dec-type char*
  variable a
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable b
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable return
    var-kind variable
    rep-type int
    dec-type int

