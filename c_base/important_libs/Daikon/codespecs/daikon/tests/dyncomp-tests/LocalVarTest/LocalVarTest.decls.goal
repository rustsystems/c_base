input-language C/C++
decl-version 2.0
var-comparability none

ppt ..foo():::ENTER
  ppt-type enter
  variable ::globalD
    var-kind variable
    rep-type int
    dec-type int
  variable ::globalE
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalE[..]
    var-kind array
    enclosing-var ::globalE
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]
  variable c
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable c[..]
    var-kind array
    enclosing-var c
    array 1
    rep-type int[]
    dec-type int[]
  variable d
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable d[..]
    var-kind array
    enclosing-var d
    array 1
    rep-type int[]
    dec-type int[]
  variable e
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable e[..]
    var-kind array
    enclosing-var e
    array 1
    rep-type int[]
    dec-type int[]

ppt ..foo():::EXIT0
  ppt-type subexit
  variable ::globalD
    var-kind variable
    rep-type int
    dec-type int
  variable ::globalE
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalE[..]
    var-kind array
    enclosing-var ::globalE
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable a
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable a[..]
    var-kind array
    enclosing-var a
    array 1
    rep-type int[]
    dec-type int[]
  variable b
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable b[..]
    var-kind array
    enclosing-var b
    array 1
    rep-type int[]
    dec-type int[]
  variable c
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable c[..]
    var-kind array
    enclosing-var c
    array 1
    rep-type int[]
    dec-type int[]
  variable d
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable d[..]
    var-kind array
    enclosing-var d
    array 1
    rep-type int[]
    dec-type int[]
  variable e
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags is_param 
  variable e[..]
    var-kind array
    enclosing-var e
    array 1
    rep-type int[]
    dec-type int[]

ppt ..main():::ENTER
  ppt-type enter
  variable ::globalD
    var-kind variable
    rep-type int
    dec-type int
  variable ::globalE
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalE[..]
    var-kind array
    enclosing-var ::globalE
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::globalD
    var-kind variable
    rep-type int
    dec-type int
  variable ::globalE
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
  variable ::globalE[..]
    var-kind array
    enclosing-var ::globalE
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
  variable return
    var-kind variable
    rep-type int
    dec-type int

