<DataStructures.StackAr.<init>(I)V:::ENTER>
  <capacity >= 0 {0+}, capacity >= 2 {1-}> (UInt,DJU)
  <capacity <= 20 {0.7308-}, capacity <= 15 {1-}> (U!Int,DUU)
<DataStructures.StackAr.<init>(I)V:::EXIT>
  <null, this.theArray[] elements == this.theArray[capacity-1] {0+}> (Bin,MJ)
  <null, this.theArray[capacity-1] == this.theArray[orig(capacity)-1] {0+}> (Bin,MJ)
  <this.topOfStack >= -1 {0.8136-}, this.topOfStack >= -1 {0.8333-}> (U!Int,SUU)
  <this.theArray != null {0.0077+}, this.theArray != null {0.1317-}> (UInt,SJU)
  <capacity <= 20 {0.7308-}, capacity <= 15 {1-}> (U!Int,DUU)
  <this.topOfStack <= -1 {0.8136-}, this.topOfStack <= -1 {0.8333-}> (U!Int,SUU)
  <this.theArray[capacity..] elements != null {0.0077+}, this.theArray[capacity..] elements != null {0.1317-}> (UInt,SJU)
  <null, this.theArray[capacity..] == [] {0+}> (UInt,MJ)
<DataStructures.StackAr.isEmpty()Z:::ENTER>
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.033-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.5886-}, this.topOfStack <= 14 {0.767-}> (U!Int,DUU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
<DataStructures.StackAr.isEmpty()Z:::EXIT>
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.033-}> (U!Int,DJU)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0.033-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.5886-}, this.topOfStack <= 14 {0.767-}> (U!Int,DUU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
<DataStructures.StackAr.isFull()Z:::ENTER>
  <null, this.topOfStack < size(this.theArray[])-1 {0.0001+}> (Bin,MJ)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
<DataStructures.StackAr.isFull()Z:::EXIT>
  <null, this.topOfStack < size(this.theArray[])-1 {0.0001+}> (Bin,MJ)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, return == false {0+}> (UInt,MJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
<DataStructures.StackAr.makeEmpty()V:::ENTER>
  <this.topOfStack <= size(this.theArray[])-1 {0.0072+}, null> (Bin,JM)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,DJU)
  <size(this.theArray[]) <= 20 {0.5-}, null> (U!Int,UM)
  <this.topOfStack <= 10 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,DUU)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements are equal {0+}, null> (UInt,JM)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class one of {  } {1-}> (UInt,DJU)
<DataStructures.StackAr.makeEmpty()V:::EXIT>
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, null> (Bin,JM)
  <this.theArray == orig(this.theArray) {0+}, null> (Bin,JM)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0072+}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..]) {0+}, null> (Bin,JM)
  <this.theArray.class == orig(this.theArray.class) {0+}, null> (Bin,JM)
  <orig(this.topOfStack) >= -1 {0+}, null> (U!Int,JM)
  <this.topOfStack >= -1 {0.8205-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,DUU)
  <this.topOfStack == -1 {0+}, this.topOfStack one of {  } {1-}> (UInt,DJU)
  <orig(this.topOfStack) <= 10 {1-}, null> (U!Int,UM)
  <size(this.theArray[]) <= 20 {0.5-}, null> (U!Int,UM)
  <size(this.theArray[])-1 <= 19 {0.5-}, null> (U!Int,UM)
  <this.topOfStack <= -1 {0.8205-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,DUU)
  <this.theArray[] elements == null {0+}, this.theArray[] elements one of {  } {1-}> (UInt,DJU)
  <orig(this.theArray[0..this.topOfStack]) elements are equal {0+}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] == [] {0+}, null> (UInt,JM)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class one of {  } {1-}> (UInt,DJU)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements one of {  } {1-}> (UInt,DJU)
<DataStructures.StackAr.pop()V:::ENTER>
  <this.topOfStack >= 9223372036854775807 {1-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,SUU)
  <this.topOfStack <= -9223372036854775808 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,SUU)
<DataStructures.StackAr.pop()V:::EXIT>
  <this.topOfStack >= 9223372036854775807 {1-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,SUU)
  <this.topOfStack <= -9223372036854775808 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,SUU)
<DataStructures.StackAr.push(Ljava/lang/Object;)V:::ENTER>
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 18 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
<DataStructures.StackAr.push(Ljava/lang/Object;)V:::EXIT>
  <orig(this.topOfStack) >= -1 {0+}, orig(this.topOfStack) >= -1 {0+}> (U!Int,SJJ)
  <orig(this.topOfStack) <= 18 {1-}, orig(this.topOfStack) <= 13 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
<DataStructures.StackAr.top()Ljava/lang/Object;:::ENTER>
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 0 {0+}> (UInt,DJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {0.8644-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
<DataStructures.StackAr.top()Ljava/lang/Object;:::EXIT>
  <null, return == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,MJ)
  <null, return == orig(this.theArray[this.topOfStack]) {0+}> (Bin,MJ)
  <null, return == this.theArray[orig(this.topOfStack)] {0+}> (Bin,MJ)
  <null, return == this.theArray[this.topOfStack] {0+}> (Bin,MJ)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 0 {0+}> (UInt,DJJ)
  <null, return != null {0.0001+}> (UInt,MJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {0.8644-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::ENTER>
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.0498-}> (U!Int,DJU)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::EXIT>
  <null, return in orig(this.theArray[]) {0+}> (Bin,MJ)
  <null, return in orig(this.theArray[post(this.topOfStack+1)..]) {0+}> (Bin,MJ)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0001+}> (Bin,MJ)
  <orig(this.topOfStack) >= -1 {0+}, orig(this.topOfStack) >= -1 {0+}> (U!Int,SJJ)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <orig(this.topOfStack) <= 19 {1-}, orig(this.topOfStack) <= 14 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.0498-}> (U!Int,DJU)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0.0498-}> (U!Int,DJU)
  <this.topOfStack <= 18 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
